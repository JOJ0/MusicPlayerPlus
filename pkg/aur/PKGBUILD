# Maintainer: Ronald Record <ronaldrecord@gmail.com>
# Contributor: Karl Stavestrand <karl@stavestrand.no>
# Contributor: Adrian Kowalski <adpkow@gmail.com>
# Contributor: Alexander Lopatin <sbar.geek@gmail.com>
# Contributor: Alexey Semenko <igogo.dev@gmail.com>
# Contributor: Andreas Rammhold <andreas@rammhold.de>
# Contributor: Andrzej Rybczak <andrzej@rybczak.net>
# Contributor: Anton Simakov <ttohin@gmail.com>
# Contributor: Arnaud Guignard <aguignard@gmail.com>
# Contributor: Asa Sourdiffe <asourdiffe@gmail.com>
# Contributor: Benoît Dardenne <benoit.dardenne@gmail.com>
# Contributor: Benoit Pierre <benoit.pierre@gmail.com>
# Contributor: brezerk <brezerk@gmail.com>
# Contributor: Chris Gregory <czipperz@gmail.com>
# Contributor: Czipperz <czipperz@gmail.com>
# Contributor: Damien Leone <damien.leone@fensalir.fr>
# Contributor: Daniel <quite@hack.org>
# Contributor: Darby Payne <darby.payne@gmail.com>
# Contributor: David Coppa <dcoppa@gmail.com>
# Contributor: Dmitriy Kusterskiy <dimykus@gmail.com>
# Contributor: Eric Izoita <ericizoita@gmail.com>
# Contributor: Frank Blendinger <fb@intoxicatedmind.net>
# Contributor: greenbagels <greenbagels@teknik.io>
# Contributor: Hamuko <hamuko@burakku.com>
# Contributor: Hugh Wang <hghwng@gmail.com>
# Contributor: Jacek Sowiński <mruwek.fs@vcf.pl>
# Contributor: James Pike <jpike@chilon.net>
# Contributor: Jan Palus <jan.palus@gmail.com>
# Contributor: Jesse Kleve <jesse.kleve@gmail.com>
# Contributor: jgr <jgr006@gmail.com>
# Contributor: John Fresco <john.fresco@utah.edu>
# Contributor: Larson Carter <larsoncarter@blazermail.net>
# Contributor: Lennart Braun <lenerd@posteo.de>
# Contributor: Maarten de Vries <maarten@de-vri.es>
# Contributor: Marc Jessome <marc.jessome@gmail.com>
# Contributor: Matthew Hague <matthewhague@zoho.com>
# Contributor: Max Kellermann <max@duempel.org>
# Contributor: Michaël Cadilhac <michael@cadilhac.name>
# Contributor: Moritz Lipp <mlq@pwmt.org>
# Contributor: Needs <needs@mailoo.org>
# Contributor: Pawel Tomak <pawel.tomak@gmail.com>
# Contributor: Qball Cow <qball@QDesk.site>
# Contributor: Raghavendra D Prabhu <rprabhu@wnohang.net>
# Contributor: Sam Simmons <sam@samiconductor.com>
# Contributor: Sebastian Peters <koelnconcert@googlemail.com>
# Contributor: sphaugh <sean.haugh@emerson.com>
# Contributor: Trygve Aaberge <trygveaa@gmail.com>
# Contributor: Wieland Hoffmann <themineo@gmail.com>
# Contributor: Wojciech Siewierski <wojciech.siewierski@onet.pl>
# Contributor: Yannick LM <yannicklm1337@gmail.com>
# Contributor: V <v@anomalous.eu>
# Contributor: Nicolas Wack <wackou@gmail.com>
# Contributor: Dmitry Bogdanov <dmitry.bogdanov@upf.edu>
# Contributor: Oscar Mayor <oscar.mayor@upf.edu>
# Contributor: Sankalp Gulati <sankalp.gulati@upf.edu>

SRC_NAME=MusicPlayerPlus
if [ -f ${SRC}/${SRC_NAME}/VERSION ]
then
  . ${SRC}/${SRC_NAME}/VERSION
else
  if [ -f VERSION ]
  then
    . ./VERSION
  else
    if [ -f ../../VERSION ]
    then
      . ../../VERSION
    else
      VERSION=2.0.1
      RELEASE=2
    fi
  fi
fi
pkgname=musicplayerplus
pkgver=$VERSION
pkgrel=$RELEASE
pkgdesc="Character based MPD client, spectrum visualizer, Beets library management, plus more"
arch=('x86_64' 'armv7h')
url="https://github.com/doctorfree/MusicPlayerPlus"
license=('MIT')
depends=(util-linux boost-libs libcurl-compat libmpdclient ncurses readline taglib mpd ffmpeg4.4 inotify-tools figlet gnome-terminal tmux fzf mpc python python-pip python-numpy python-six mplayer dconf eigen fftw clang libsamplerate chromaprint iniparser libyaml swig alsa-lib libpulse sqlite qt5-base)
makedepends=(boost pandoc qt5-tools zip)
optdepends=('asciinema: record and share terminal sessions'
            'cool-retro-term: cool retro terminal emulator'
            'tilix: tiling terminal emulator')
install=musicplayerplus.install
source=("git+https://github.com/doctorfree/MusicPlayerPlus.git")
options=(strip docs !libtool !staticlibs emptydirs zipman purge !debug !lto)
sha256sums=('SKIP')

build() {
  cd "${srcdir}/${SRC_NAME}"
  # Build mpcplus
  if [ -x scripts/build-mpcplus.sh ]
  then
    scripts/build-mpcplus.sh -v
  else
    cd mpcplus
    make clean
    make distclean
    [ -x ./configure ] || ./autogen.sh > /dev/null
    ./configure --prefix=/usr \
                --enable-outputs \
                --enable-clock \
                --enable-visualizer \
                --with-fftw \
                --with-taglib > configure$$.out
    make > make$$.out
    cd ..
  fi

  # Build mppcava
  if [ -x scripts/build-mppcava.sh ]
  then
    scripts/build-mppcava.sh
  else
    cd mppcava
    make clean
    make distclean
    [ -x ./configure ] || ./autogen.sh > /dev/null
    ./configure --prefix=/usr > configure$$.out
    make > make$$.out
    cd ..
  fi

  # Build bliss-analyze
  if [ -x scripts/build-bliss-analyze.sh ]
  then
    scripts/build-bliss-analyze.sh
  else
    PROJ=bliss-analyze
    [ -d ${PROJ} ] || git clone https://github.com/doctorfree/bliss-analyze
    [ -x ${PROJ}/target/release/bliss-analyze ] || {
      have_cargo=`type -p cargo`
      if [ "${have_cargo}" ]
      then
        cd ${PROJ}
        PKGPATH=`pkg-config --variable pc_path pkg-config`
        [ -d /usr/lib/ffmpeg4.4/pkgconfig ] && {
          PKGPATH="/usr/lib/ffmpeg4.4/pkgconfig:${PKGPATH}"
        }
        export PKG_CONFIG_PATH="${PKGPATH}:/usr/lib/pkgconfig"
        cargo build -r
        cd ..
      else
        echo "The cargo tool cannot be located."
        echo "Cargo is required to build bliss-analyze."
      fi
    }
  fi

  # Build blissify
  if [ -x scripts/build-blissify.sh ]
  then
    scripts/build-blissify.sh
  else
    PROJ=blissify
    [ -d ${PROJ} ] || git clone https://github.com/doctorfree/blissify
    [ -x ${PROJ}/target/release/blissify ] || {
      have_cargo=`type -p cargo`
      if [ "${have_cargo}" ]
      then
        cd ${PROJ}
        PKGPATH=`pkg-config --variable pc_path pkg-config`
        [ -d /usr/lib/ffmpeg4.4/pkgconfig ] && {
          PKGPATH="/usr/lib/ffmpeg4.4/pkgconfig:${PKGPATH}"
        }
        export PKG_CONFIG_PATH="${PKGPATH}:/usr/lib/pkgconfig"
        cargo build -r
        cd ..
      else
        echo "The cargo tool cannot be located."
        echo "Cargo is required to build blissify."
      fi
    }
  fi

  # Build essentia
  if [ -x scripts/build-essentia.sh ]
  then
    scripts/build-essentia.sh
  else
    cd essentia
    PKGPATH=`pkg-config --variable pc_path pkg-config`
    [ -d /usr/lib/ffmpeg4.4/pkgconfig ] && {
      PKGPATH="/usr/lib/ffmpeg4.4/pkgconfig:${PKGPATH}"
    }
    export PKG_CONFIG_PATH="${PKGPATH}:/usr/lib/pkgconfig"
    python3 waf configure --prefix=/usr \
                          --build-static \
                          --with-python \
                          --with-gaia \
                          --with-example=streaming_extractor_music
    python3 waf
    cd ..
  fi
}

package() {
    cd "${srcdir}/${SRC_NAME}/dist"
    cp -a "${SRC_NAME}_${VERSION}/usr" "${pkgdir}/usr"
}
