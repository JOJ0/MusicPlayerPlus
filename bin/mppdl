#!/bin/bash
#
# mppdl - download audio of specified URL
#
# Written 10-Aug-2022 by Ronald Record <ronaldrecord@gmail.com>

MPD_CONF="${HOME}/.config/mpd/mpd.conf"
MPP_CONF="${HOME}/.config/musicplayerplus/config"
FMT="m4a"
LISTCOMM="yt-dlp -Uv -F -f 'ba' -x --list-formats"
URL=
LIST=
ALBUM=
ARTIST=
IMPORT=
IMPORT_ONLY=
TITLE=
TRACK=
MUSIC_DIR=

usage() {
  printf "\nUsage: mppdl [-a album] [-A artist] [-d music_dir] [-i] [-I]"
  printf "\n             [-f fmt] [-l] [-p playlist] [-t track] [-T title]"
  printf "\n             bandcamp|soundcloud|URL"
  printf "\nWhere:"
  printf "\n\t-a 'album' saves the downloads in the subdirectory 'album'"
  printf "\n\t-A 'artist' saves the download with filename"
  printf "\n\t\t'artist'-'title'.${FMT}"
  printf "\n\t-d 'music_dir' saves the downloads in 'music_dir/...'"
  printf "\n\t-i indicates import audio into Beets after download completes"
  printf "\n\t-I indicates import already downloaded audio into Beets"
  printf "\n\t-f 'fmt' saves the download in 'fmt' format (default m4a)"
  printf "\n\t-p 'playlist' saves the downloads in the subdirectory 'playlist'"
  printf "\n\t-t 'track' saves the download with filename"
  printf "\n\t\t'track'-'artist'-'title'.${FMT}"
  printf "\n\t-T 'title' saves the download with filename"
  printf "\n\t\t'artist'-'title'.${FMT}"
  printf "\n\t-l indicates list available formats and info on URL"
  printf "\n\t-u displays this usage message and exits\n"
  printf "\nThe argument 'bandcamp', 'soundcloud', or 'URL' indicates:"
  printf "\n\tDownload Bandcamp collections"
  printf "\n\tDownload Soundcloud favorites"
  printf "\n\tDownload audio in URL\n"
  printf "\nWhen importing existing downloads with the '-I' option,"
  printf "\nrestrict the import of already downloaded songs with:"
  printf "\n\t'-I bandcamp' or '-I soundcloud' or '-I downloads'"
  printf "\n-I with no arguments imports all downloaded songs\n"
  exit 1
}

while getopts "a:A:d:f:p:t:T:iIlu" flag; do
    case $flag in
        a)
            ALBUM="$OPTARG"
            ;;
        A)
            ARTIST="$OPTARG"
            ;;
        d)
            MUSIC_DIR="$OPTARG"
            ;;
        f)
            FMT="$OPTARG"
            ;;
        i)
            have_beet=`type -p beet`
            if [ "${have_beet}" ]
            then
              IMPORT=1
            else
              echo "The beet command could not be found. Skipping Beets import."
            fi
            ;;
        I)
            have_beet=`type -p beet`
            if [ "${have_beet}" ]
            then
              IMPORT=1
              IMPORT_ONLY=1
            else
              echo "The beet command could not be found. Skipping Beets import."
            fi
            ;;
        l)
            LIST=1
            ;;
        p)
            ALBUM="$OPTARG"
            ;;
        t)
            TRACK="$OPTARG"
            ;;
        T)
            TITLE="$OPTARG"
            ;;
        u)
            usage
            ;;
    esac
done
shift $(( OPTIND - 1 ))

[ "$1" ] || {
  [ "${IMPORT_ONLY}" ] || {
    echo "An argument of 'bandcamp', 'soundcloud' or a URL is required."
    echo "Exiting."
    usage
  }
}

[ "${MUSIC_DIR}" ] || {
  [ -f "${MPP_CONF}" ] && . "${MPP_CONF}"
  [ "${MUSIC_DIR}" ] || {
    MUSIC_DIR=`grep ^music_directory ${MPD_CONF}`
    MUSIC_DIR=`echo ${MUSIC_DIR} | awk ' { print $2 } ' | sed -e "s/\"//g"`
    [ "${MUSIC_DIR}" ] || MUSIC_DIR="${HOME}/Music"
    # Need to expand the tilda to $HOME
    MUSIC_DIR="${MUSIC_DIR/#\~/$HOME}"
  }
}

if [ "$1" == "bandcamp" ]
then
  [ "${IMPORT_ONLY}" ] || mppinit bandcamp
  [ "${IMPORT}" ] && {
    [ -d "${MUSIC_DIR}/Bandcamp" ] && beet import -q "${MUSIC_DIR}/Bandcamp"
    [ -d "${MUSIC_DIR}/Bandcamp" ] && beet import -q -s "${MUSIC_DIR}/Bandcamp"
  }
  exit 0
else
  if [ "$1" == "soundcloud" ]
  then
    [ "${IMPORT_ONLY}" ] || mppinit soundcloud
    [ "${IMPORT}" ] && {
      [ -d "${MUSIC_DIR}/Soundcloud" ] && {
        beet import -q "${MUSIC_DIR}/Soundcloud"
      }
      [ -d "${MUSIC_DIR}/Soundcloud" ] && {
        beet import -q -s "${MUSIC_DIR}/Soundcloud"
      }
    }
    exit 0
  else
    have_yt=`type -p yt-dlp`
    [ "${have_yt}" ] || {
      echo "The mppdl command requires yt-dlp for URL downloads"
      echo "The yt-dlp command is not found in the execution PATH."
      echo "Exiting."
      exit 1
    }
  fi
fi

COMMAND="yt-dlp -x -f bestaudio[ext=${FMT}]/bestaudio --embed-metadata"
URL="$1"
DDIR="${MUSIC_DIR}/Downloads"

[ -d "${DDIR}" ] || mkdir -p "${DDIR}"
[ "${ALBUM}" ] && {
  DDIR="${MUSIC_DIR}/Downloads/${ALBUM}"
  [ -d "${DDIR}" ] || mkdir -p "${DDIR}"
}

if [ "${LIST}" ]
then
  ${LISTCOMM} ${URL}
else
  [ "${IMPORT_ONLY}" ] && {
    [ -d "${DDIR}" ] && {
      beet import -q "${DDIR}"
      beet import -q -s "${DDIR}"
      echo "Beets import of ${DDIR} complete"
    }
    [ "${URL}" == "downloads" ] || {
      [ -d "${MUSIC_DIR}/Bandcamp" ] && {
        beet import -q "${MUSIC_DIR}/Bandcamp"
        beet import -q -s "${MUSIC_DIR}/Bandcamp"
        echo "Beets import of ${MUSIC_DIR}/Bandcamp complete"
      }
      [ -d "${MUSIC_DIR}/Soundcloud" ] && {
        beet import -q "${MUSIC_DIR}/Soundcloud"
        beet import -q -s "${MUSIC_DIR}/Soundcloud"
        echo "Beets import of ${MUSIC_DIR}/Soundcloud complete"
      }
    }
    exit 0
  }
  surl=`echo "${URL}" | sed -e "s%https://%%" -e "s%http://%%"`
  printf "\nDownloading:\n  ${surl}\n"
  printf "\nStoring download(s) in:\n  ${DDIR}\n\n"
  destinations=`${COMMAND} ${URL} \
                   -o "${DDIR}/%(title)s.%(ext)s" 2>&1 | \
                   grep Destination: | \
                   awk -F '/' ' { print $NF } ' | sed -e "s/'//g"`
  numdests=`echo "${destinations}" | wc -l`
  [ ${numdests} -gt 1 ] && {
    [ "${TRACK}" ] || TRACK=1
  }
  while IFS= read -r FN
  do
    echo "Processing ${FN}"
    if [ "${FN}" ]
    then
      [ -f "${DDIR}/${FN}" ] || {
        echo "${DDIR}/${FN} does not exist. Skipping."
        continue
      }
      EXT=`echo ${FN} | awk -F '.' ' { print $NF } '`
      if [ "${ARTIST}" ]
      then
        if [ "${TITLE}" ]
        then
          if [ "${TRACK}" ]
          then
            if [ -f "${DDIR}/${TRACK}-${ARTIST}-${TITLE}.${EXT}" ]
            then
              mv "${DDIR}/${FN}" "${DDIR}/${TRACK}-${ARTIST}-${TITLE}-$$.${EXT}"
              FN="${TRACK}-${ARTIST}-${TITLE}-$$.${EXT}"
            else
              mv "${DDIR}/${FN}" "${DDIR}/${TRACK}-${ARTIST}-${TITLE}.${EXT}"
              FN="${TRACK}-${ARTIST}-${TITLE}.${EXT}"
            fi
            TRACK=$((TRACK + 1))
          else
            if [ -f "${DDIR}/${ARTIST}-${TITLE}.${EXT}" ]
            then
              mv "${DDIR}/${FN}" "${DDIR}/${ARTIST}-${TITLE}-$$.${EXT}"
              FN="${ARTIST}-${TITLE}-$$.${EXT}"
            else
              mv "${DDIR}/${FN}" "${DDIR}/${ARTIST}-${TITLE}.${EXT}"
              FN="${ARTIST}-${TITLE}.${EXT}"
            fi
          fi
        else
          if [ "${TRACK}" ]
          then
            if [ -f "${DDIR}/${TRACK}-${ARTIST}.${EXT}" ]
            then
              mv "${DDIR}/${FN}" "${DDIR}/${TRACK}-${ARTIST}-$$.${EXT}"
              FN="${TRACK}-${ARTIST}-$$.${EXT}"
            else
              mv "${DDIR}/${FN}" "${DDIR}/${TRACK}-${ARTIST}.${EXT}"
              FN="${TRACK}-${ARTIST}.${EXT}"
            fi
            TRACK=$((TRACK + 1))
          else
            if [ -f "${DDIR}/${TRACK}-${ARTIST}.${EXT}" ]
            then
              mv "${DDIR}/${FN}" "${DDIR}/${ARTIST}-$$.${EXT}"
              FN="${ARTIST}-$$.${EXT}"
            else
              mv "${DDIR}/${FN}" "${DDIR}/${ARTIST}.${EXT}"
              FN="${ARTIST}.${EXT}"
            fi
          fi
        fi
      else
        if [ "${TITLE}" ]
        then
          if [ "${TRACK}" ]
          then
            if [ -f "${DDIR}/${TRACK}-${TITLE}.${EXT}" ]
            then
              mv "${DDIR}/${FN}" "${DDIR}/${TRACK}-${TITLE}-$$.${EXT}"
              FN="${TRACK}-${TITLE}-$$.${EXT}"
            else
              mv "${DDIR}/${FN}" "${DDIR}/${TRACK}-${TITLE}.${EXT}"
              FN="${TRACK}-${TITLE}.${EXT}"
            fi
            TRACK=$((TRACK + 1))
          else
            if [ -f "${DDIR}/${TITLE}.${EXT}" ]
            then
              mv "${DDIR}/${FN}" "${DDIR}/${TITLE}-$$.${EXT}"
              FN="${TITLE}-$$.${EXT}"
            else
              mv "${DDIR}/${FN}" "${DDIR}/${TITLE}.${EXT}"
              FN="${TITLE}.${EXT}"
            fi
          fi
        else
          [ "${TRACK}" ] && {
            if [ -f "${DDIR}/${TRACK}-${FN}" ]
            then
              mv "${DDIR}/${FN}" "${DDIR}/${TRACK}$$-${FN}"
              FN="${TRACK}$$-${FN}"
            else
              mv "${DDIR}/${FN}" "${DDIR}/${TRACK}-${FN}"
              FN="${TRACK}-${FN}"
            fi
            TRACK=$((TRACK + 1))
          }
        fi
      fi
      if [ "${EXT}" == "${FMT}" ]
      then
        [ "${IMPORT}" ] && {
          if [ "${ALBUM}" ]
          then
            [ -d "${DDIR}" ] && beet import -q "${DDIR}"
            [ -d "${DDIR}" ] && beet import -q -s "${DDIR}"
          else
            beet import -q -s "${DDIR}/${FN}"
          fi
        }
      else
        NAME=`echo ${FN} | awk 'BEGIN{FS=OFS="."}{NF--; print}'`
        echo "Converting ${DDIR}/${FN} to ${NAME}.${FMT}"
        ffmpeg -i "${DDIR}/${FN}" \
               -vn "${DDIR}/${NAME}.${FMT}"
        echo "Removing ${DDIR}/${FN}"
        rm -f "${DDIR}/${FN}"
        [ "${IMPORT}" ] && {
          if [ "${ALBUM}" ]
          then
            [ -d "${DDIR}" ] && beet import -q "${DDIR}"
            [ -d "${DDIR}" ] && beet import -q -s "${DDIR}"
          else
            beet import -q -s "${DDIR}/${NAME}.${FMT}"
          fi
        }
      fi
    else
      echo "Could not determine destination filename in ${DDIR}/"
    fi
  done < <(printf '%s\n' "${destinations}")
fi

