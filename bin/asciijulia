#!/usr/bin/env python3
#
# Animate a zoom bounce on a Julia Set using ASCII characters
# Written by Ronald Record <ronaldrecord@gmail.com>
#
# Usage: asciijulia [-c int] [-i] [-x float -y float]
# Where -c int specifies how many times to cycle the zoom/bounce before exit
#              without any -c argument the cycling continues until 'q' press
#       -i show an info pane with starting coordinates
#       -x float -y float specify the real coordinates of the complex number
#                     used as starting point for the Julia Set calculation.
#                     Default value for this is [-0.8, 0.156]
#
# Interesting zooms occur with these example invocations:
#     asciijulia -x 0.687 -y 0.312
#     asciijulia -x 0.54 -y 0.54
#     asciijulia -x 0.6 -y 0.55
#     asciijulia -x 0.0 -y 0.8
#     asciijulia -x -0.4 -y -0.59

from asciimatics.effects import Julia, Print, Stars
from asciimatics.renderers import FigletText, Rainbow
from asciimatics.scene import Scene
from asciimatics.screen import Screen
from asciimatics.exceptions import ResizeScreenError
import os
import signal
import subprocess
import sys
import argparse


def asciijulia(screen, c):
    scenes = []
    center = (screen.width // 2, screen.height // 2)

    if showinfo:
        if c is None:
            cstr = "( -0.8 , 0.156i )"
        else:
            cstr = "( " + str(c[0]) + " , " + str(c[1]) + "i )"

        effects = [
            Print(
                screen,
                Rainbow(screen, FigletText("Julia Set")),
                center[1] - 8,
                speed=1,
                start_frame=10),
            Print(
                screen,
                Rainbow(screen, FigletText("Complex Value")),
                center[1] - 3,
                speed=1,
                start_frame=10),
            Print(
                screen,
                Rainbow(screen, FigletText(cstr)),
                center[1] + 3,
                speed=1,
                start_frame=10),
            Stars(screen, (screen.width + screen.height) // 2)
        ]
        scenes.append(Scene(effects, 200))

    effects = [
        Julia(screen, c, stop_frame=numcycles),
    ]
    scenes.append(Scene(effects, numcycles))

    if cycle is None:
        screen.play(scenes, stop_on_resize=True)
    else:
        screen.play(scenes, stop_on_resize=True, repeat=False)


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("-a", "--audio", help="audio file to play during effects")
    parser.add_argument("-c", "--cycle", help="number of times to cycle back through effects")
    parser.add_argument("-i", "--info", default=False, action='store_true', help="show an info pane with starting coordinates")
    parser.add_argument("-x", "--xvalue", help="starting x value of 'c' for the Julia set")
    parser.add_argument("-y", "--yvalue", help="starting y value of 'c' for the Julia set")
    args = parser.parse_args()

    if args.audio:
        song = args.audio
    else:
        song = None
    if args.cycle:
        numcycles = int(args.cycle)
        cycle = True
    else:
        numcycles = 0
        cycle = None
    if args.info:
        showinfo = True
    else:
        showinfo = False

    c = None
    if args.xvalue:
      if args.yvalue:
        c = [float(args.xvalue.replace('\U00002013', '-')),
             float(args.yvalue.replace('\U00002013', '-'))]

    play_song = None
    if song is not None:
        fnam, fext = os.path.splitext(song)
        if fext == ".ogg":
            play_song = subprocess.Popen(["ogg123", "-q", "-d", "alsa", song],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.STDOUT)
        elif fext == ".mp3":
            play_song = subprocess.Popen(["mpg123", "-q", song],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.STDOUT)
        else:
            play_song = subprocess.Popen(["aplay", "-q", song],
                stdout=subprocess.DEVNULL,
                stderr=subprocess.STDOUT)

    while True:
        try:
            Screen.wrapper(asciijulia, arguments=[c])
            if play_song is not None:
                song_status = play_song.poll()
                if song_status is None:
                    os.killpg(os.getpgid(play_song.pid), signal.SIGTERM)
            sys.exit(0)
        except ResizeScreenError:
            pass
