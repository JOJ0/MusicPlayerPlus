#!/bin/bash
#
# mpcinit - initialize mpcplus configuration files
#
# Copy and configure default configuration files in $HOME/.config/mpcplus/
# Also setup default tmux configuration for this user
# Install required pip modules if not already installed

MPPCDIR=/usr/share/doc/musicplayerplus
CONFDIR=${MPPCDIR}/mpcplus
WITHART="album_cover.sh catalog.conf cava-tmux.conf \
         cover_obs.sh default_cover.png fzmp.conf"

[ -f ${CONFDIR}/config ] || {
    echo "${CONFDIR}/config does not exist."
    echo "MusicPlayerPlus installation incomplete"
    exit 1
}
[ -f ${CONFDIR}/bindings ] || {
    echo "${CONFDIR}/bindings does not exist."
    echo "MusicPlayerPlus installation incomplete"
    exit 1
}

if [ -f ${HOME}/.config/mpcplus/config ]
then
  MPCDIR=".config/mpcplus"
else
  if [ -f ${HOME}/.mpcplus/config ]
  then
    MPCDIR=".mpcplus"
  else
    [ -d ${HOME}/.config/mpcplus ] || mkdir -p ${HOME}/.config/mpcplus
    cp ${CONFDIR}/config ${HOME}/.config/mpcplus/config
    MPCDIR=".config/mpcplus"
  fi
fi
[ -f ${HOME}/${MPCDIR}/bindings ] || {
  cp ${CONFDIR}/bindings ${HOME}/${MPCDIR}/bindings
}

for cfg in ${WITHART}
do
  [ -f ${HOME}/${MPCDIR}/${cfg} ] || {
    cp ${CONFDIR}/${cfg} ${HOME}/${MPCDIR}/${cfg}
  }
done

create_new_profile() {
  local proterm="$1"
  local proname="$2"
  local profont="$3"
  if [ "${proterm}" == "gnome" ]
  then
    local profile_ids=($(dconf list $dconfdir/ | grep ^: |\
        sed 's/\///g' | sed 's/://g'))
  fi
  if [ "${proterm}" == "tilix" ]
  then
    local profile_ids=($(dconf list $dconfdir/ | grep -v ^list |\
        sed 's/\///g' | sed 's/://g'))
  fi
  local profile_ids_old="$(dconf read "$dconfdir"/list | tr -d "]")"
  local profile_id="$(uuidgen)"
  [ "${debug}" ] && {
    echo "profile_ids_old=${profile_ids_old}"
    echo "profile_id=${profile_id}"
  }

  if [ -z "$profile_ids_old" ]
  then
    if [ ${#profile_ids[@]} -gt 0 ]
    then
      for id in "${!profile_ids[@]}"
      do
        profile_ids[${id}]="'profile_ids[${id}]',"
      done
      dconf write $dconfdir/list "[${profile_ids[*]} '$profile_id']" 2> /dev/null
      [ "${debug}" ] && {
        echo "A: dconf write $dconfdir/list [${profile_ids[*]} '$profile_id']"
      }
    else
      dconf write $dconfdir/list "['$profile_id']" 2> /dev/null
      [ "${debug}" ] && {
        echo "B: dconf write $dconfdir/list ['$profile_id']"
      }
    fi
  else
    dconf write $dconfdir/list "${profile_ids_old}, '$profile_id']" 2> /dev/null
    [ "${debug}" ] && {
      echo "C: dconf write $dconfdir/list ${profile_ids_old}, '$profile_id']"
    }
  fi

  if [ "${proterm}" == "gnome" ]
  then
    profile_path="$dconfdir/:$profile_id"
  fi
  if [ "${proterm}" == "tilix" ]
  then
    profile_path="$dconfdir/$profile_id"
  fi
  dconf write $profile_path/visible-name "'$proname'" 2> /dev/null

  # MusicPlayerPlus profiles want a semi-transparent background
  dconf write $profile_path/background-color "'rgb(0,0,0)'" 2> /dev/null
  dconf write $profile_path/foreground-color "'rgb(255,255,255)'" 2> /dev/null
  dconf write $profile_path/cursor-shape "'underline'" 2> /dev/null
  dconf write $profile_path/cursor-blink-mode "'off'" 2> /dev/null
  dconf write $profile_path/use-theme-colors "false" 2> /dev/null
  if [ "${proterm}" == "gnome" ]
  then
    dconf write $profile_path/use-theme-transparency "false" 2> /dev/null
    dconf write $profile_path/use-transparent-background "true" 2> /dev/null
  fi
  dconf write $profile_path/background-transparency-percent "50" 2> /dev/null
  dconf write $profile_path/use-system-font "false" 2> /dev/null
  dconf write $profile_path/font "'Monospace ${profont}'" 2> /dev/null
}

# If no MusicPlayerPlus and Visualizer terminal profiles exist, create them
declare -a profiles
dconfdir=/org/gnome/terminal/legacy/profiles:
profiles=($(gsettings get org.gnome.Terminal.ProfilesList list | tr -d "[]\',"))

for profile_name in MusicPlayer Visualizer
do
  profile_exists=
  fontsize=8
  [ "${profile_name}" == "MusicPlayer" ] && fontsize=32
  if [ "$profiles" = "" ]
  then
    create_new_profile gnome ${profile_name} ${fontsize}
  else
    for i in ${!profiles[*]}
    do
      visname="$(dconf read $dconfdir/:${profiles[i]}/visible-name)"
      [ "${visname}" == "'${profile_name}'" ] && profile_exists=1
      [ "$profile_exists" ] && break
    done
  fi

  [ "$profile_exists" ] || {
    create_new_profile gnome ${profile_name} ${fontsize}
  }
done

# Create Tilix profiles, similar to Gnome-terminal's
dconfdir=/com/gexperts/Tilix/profiles
profiles=($(gsettings get com.gexperts.Tilix.ProfilesList list | tr -d "[]\',"))

for profile_name in MusicPlayer Visualizer
do
  profile_exists=
  fontsize=8
  [ "${profile_name}" == "MusicPlayer" ] && fontsize=32

  if [ "$profiles" = "" ]
  then
    create_new_profile tilix ${profile_name} ${fontsize}
  else
    for i in ${!profiles[*]}
    do
      visname="$(dconf read $dconfdir/${profiles[i]}/visible-name)"
      [ "${visname}" == "'${profile_name}'" ] && profile_exists=1
      [ "$profile_exists" ] && break
    done
  fi

  [ "$profile_exists" ] || {
    create_new_profile tilix ${profile_name} ${fontsize}
  }
done

# If there is no user MPD config
# then copy the MusicPlayerPlus MPD config folder
# into the user's home and setup user MPD service
MPDCONFDIR="${HOME}/.config/mpd"
MPDCONF="${MPDCONFDIR}/mpd.conf"
[ -f ${MPDCONF} ] || {
  if [ -d ${MPDCONFDIR} ]
  then
    cp ${MPPCDIR}/mpd/mpd.conf ${MPDCONF}
  else
    cp -a ${MPPCDIR}/mpd ${MPDCONFDIR}
  fi
}

mpd_music=`grep ^music_directory ${MPDCONF}`
[ "${mpd_music}" ] || mpd_music=`grep \#music_directory ${MPDCONF}`
mpd_music=`echo ${mpd_music} | awk ' { print $2 } ' | sed -e "s/\"//g"`
# Need to expand the tilda to $HOME
exp_music="${mpd_music/#\~/$HOME}"
if [ "${mpd_music}" ]
then
  # Create mpd_music directory if it does not exist
  [ -d "${exp_music}" ] || {
    if [ -d "${HOME}/Music" ]
    then
      ln -s ${HOME}/Music ${exp_music}
    else
      mkdir -p ${exp_music}
    fi
  }
  mpc_custom=1
  mpc_music=`grep ^mpd_music_dir ${HOME}/${MPCDIR}/config`
  [ "${mpc_music}" ] || {
    mpc_music=`grep \#mpd_music_dir ${HOME}/${MPCDIR}/config`
    mpc_custom=
  }
  mpc_music=`echo ${mpc_music} | awk ' { print $3 } '`
  [ "${mpd_music}" == "${mpc_music}" ] || {
    if [ "${mpc_custom}" ]
    then
      cat ${HOME}/${MPCDIR}/config | sed -e "s%^mpd_music_dir.*%mpd_music_dir = ${mpd_music}%" > /tmp/newconf$$
    else
      cat ${HOME}/${MPCDIR}/config | sed -e "s%#mpd_music_dir.*%mpd_music_dir = ${mpd_music}%" > /tmp/newconf$$
    fi
    cp /tmp/newconf$$ ${HOME}/${MPCDIR}/config
    rm -f /tmp/newconf$$
    cat ${HOME}/${MPCDIR}/catalog.conf | sed -e "s%^mpd_music_dir.*%mpd_music_dir = ${mpd_music}%" > /tmp/catalog$$
    cp /tmp/catalog$$ ${HOME}/${MPCDIR}/catalog.conf
    rm -f /tmp/catalog$$
  }

  # Disable and stop any system-wide MPD service
  systemctl is-active --quiet mpd.service
  [ $? -eq 0 ] && sudo systemctl stop --quiet mpd.service
  systemctl is-active --quiet mpd.socket
  [ $? -eq 0 ] && sudo systemctl stop --quiet mpd.socket
  systemctl is-enabled --quiet mpd.service
  [ $? -eq 0 ] && sudo systemctl disable --quiet mpd.service
  systemctl is-enabled --quiet mpd.socket
  [ $? -eq 0 ] && sudo systemctl disable --quiet mpd.socket

  # Enable and activate the MPD user service
  systemctl --user is-active --quiet mpd.service
  if [ $? -eq 0 ]
  then
    # User service is active, restart to pickup any config changes
    systemctl --user restart --quiet mpd.service
  else
    systemctl --user start --quiet mpd.service
  fi
  systemctl --user is-enabled --quiet mpd.service
  [ $? -eq 0 ] || systemctl --user enable --quiet mpd.service
  have_mpc=`type -p mpc`
  [ "${have_mpc}" ] && mpc update --quiet
else
  echo "WARNING:"
  echo "Could not detect any music_directory setting in ${MPDCONF}"
  echo "Manual configuration of ${MPDCONF} and ${HOME}/${MPCDIR}/config required"
fi

# Setup default tmux configuration for this user unless terminal-overrides has already been set
[ -f ${CONFDIR}/tmux.conf ] && {
  if [ -f ${HOME}/.tmux.conf ]
  then
    grep terminal-overrides ${HOME}/.tmux.conf > /dev/null || {
      cat ${CONFDIR}/tmux.conf >> ${HOME}/.tmux.conf
    }
  else
    cat ${CONFDIR}/tmux.conf >> ${HOME}/.tmux.conf
  fi
}

have_pip=`type -p pip`
[ "${have_pip}" ] || {
  plat=`uname -s`
  if [ "$plat" == "Darwin" ]
  then
    python3 -m ensurepip --upgrade
  else
    debian=
    [ -f /etc/os-release ] && . /etc/os-release
    [ "${ID_LIKE}" == "debian" ] && debian=1
    [ "${debian}" ] || [ -f /etc/debian_version ] && debian=1

    if [ "${debian}" ]
    then
      sudo apt install python3-pip -y
    else
      sudo dnf install python3-pip -y
    fi
  fi
}

pip list | grep ueberzug > /dev/null || python -m pip install ueberzug
pip list | grep asciimatics > /dev/null || python -m pip install asciimatics

printf "\nMusicPlayerPlus Initialization Complete\n"
printf "\nVisit the MusicPlayerPlus Wiki at:"
printf "\n\thttps://github.com/doctorfree/MusicPlayerPlus/wiki\n"

type -p mppsplash > /dev/null && {
  while true
  do
    read -p "View a MusicPlayerPlus ASCII animation ? (y/n) " yn
    case $yn in
      [Yy]* )
              mppsplash -c 1 -a
              break
              ;;
      [Nn]* )
              printf "\nExiting.\n"
              exit 0
              ;;
          * ) echo "Please answer yes or no."
              ;;
    esac
  done
}
