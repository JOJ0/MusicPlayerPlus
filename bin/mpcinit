#!/bin/bash
#
# mpcinit - initialize mpcplus configuration files
#
# Copy and configure default configuration files in $HOME/.config/mpcplus/
# Also setup default tmux configuration for this user
# Install required pip modules if not already installed

MPPCDIR=/usr/share/musicplayerplus
CONFDIR=${MPPCDIR}/mpcplus
SCPTDIR=${MPPCDIR}/scripts
CONF=${HOME}/.config
MPDCONFDIR="${CONF}/mpd"
MPDCONF="${MPDCONFDIR}/mpd.conf"
BEETSCONFDIR="${CONF}/beets"
BEETSCONF="${BEETSCONFDIR}/config.yaml"
CFGS="config-art.conf default_cover.png fzmp.conf"
SCPS="album_cover.sh cover_obs.sh mpcplus-art.sh mppsplash-dual.sh"
BOLD=$(tput bold)
NORM=$(tput sgr0)

create_new_profile() {
  local proterm="$1"
  local proname="$2"
  local profont="$3"
  if [ "${proterm}" == "gnome" ]
  then
    local profile_ids=($(dconf list $dconfdir/ | grep ^: |\
        sed 's/\///g' | sed 's/://g'))
  fi
  if [ "${proterm}" == "tilix" ]
  then
    local profile_ids=($(dconf list $dconfdir/ | grep -v ^list |\
        sed 's/\///g' | sed 's/://g'))
  fi
  local profile_ids_old="$(dconf read "$dconfdir"/list | tr -d "]")"
  local profile_id="$(uuidgen)"
  [ "${debug}" ] && {
    echo "profile_ids_old=${profile_ids_old}"
    echo "profile_id=${profile_id}"
  }

  if [ -z "$profile_ids_old" ]
  then
    if [ ${#profile_ids[@]} -gt 0 ]
    then
      for id in "${!profile_ids[@]}"
      do
        profile_ids[${id}]="'profile_ids[${id}]',"
      done
      dconf write $dconfdir/list "[${profile_ids[*]} '$profile_id']" 2> /dev/null
      [ "${debug}" ] && {
        echo "A: dconf write $dconfdir/list [${profile_ids[*]} '$profile_id']"
      }
    else
      dconf write $dconfdir/list "['$profile_id']" 2> /dev/null
      [ "${debug}" ] && {
        echo "B: dconf write $dconfdir/list ['$profile_id']"
      }
    fi
  else
    dconf write $dconfdir/list "${profile_ids_old}, '$profile_id']" 2> /dev/null
    [ "${debug}" ] && {
      echo "C: dconf write $dconfdir/list ${profile_ids_old}, '$profile_id']"
    }
  fi

  if [ "${proterm}" == "gnome" ]
  then
    profile_path="$dconfdir/:$profile_id"
  fi
  if [ "${proterm}" == "tilix" ]
  then
    profile_path="$dconfdir/$profile_id"
  fi
  dconf write $profile_path/visible-name "'$proname'" 2> /dev/null

  # MusicPlayerPlus profiles want a semi-transparent background
  dconf write $profile_path/background-color "'rgb(0,0,0)'" 2> /dev/null
  dconf write $profile_path/foreground-color "'rgb(255,255,255)'" 2> /dev/null
  dconf write $profile_path/cursor-shape "'underline'" 2> /dev/null
  dconf write $profile_path/cursor-blink-mode "'off'" 2> /dev/null
  dconf write $profile_path/use-theme-colors "false" 2> /dev/null
  if [ "${proterm}" == "gnome" ]
  then
    dconf write $profile_path/use-theme-transparency "false" 2> /dev/null
    dconf write $profile_path/use-transparent-background "true" 2> /dev/null
  fi
  dconf write $profile_path/background-transparency-percent "50" 2> /dev/null
  dconf write $profile_path/use-system-font "false" 2> /dev/null
  dconf write $profile_path/font "'Monospace ${profont}'" 2> /dev/null
}

sync_music_dir() {
  mpd_music=`grep ^music_directory ${MPDCONF}`
  [ "${mpd_music}" ] || mpd_music=`grep \#music_directory ${MPDCONF}`
  mpd_music=`echo ${mpd_music} | awk ' { print $2 } ' | sed -e "s/\"//g"`
  # Need to expand the tilda to $HOME
  exp_music="${mpd_music/#\~/$HOME}"
  if [ "${mpd_music}" ]
  then
    # Create mpd_music directory if it does not exist
    [ -d "${exp_music}" ] || mkdir -p ${exp_music}
    mpc_custom=1
    mpc_music=`grep ^mpd_music_dir ${HOME}/${MPCDIR}/config`
    [ "${mpc_music}" ] || {
      mpc_music=`grep \#mpd_music_dir ${HOME}/${MPCDIR}/config`
      mpc_custom=
    }
    mpc_music=`echo ${mpc_music} | awk ' { print $3 } '`
    [ "${mpd_music}" == "${mpc_music}" ] || {
      if [ "${mpc_custom}" ]
      then
        cat ${HOME}/${MPCDIR}/config | sed -e "s%^mpd_music_dir.*%mpd_music_dir = ${mpd_music}%" > /tmp/mpc$$
      else
        cat ${HOME}/${MPCDIR}/config | sed -e "s%#mpd_music_dir.*%mpd_music_dir = ${mpd_music}%" > /tmp/mpc$$
      fi
      cp /tmp/mpc$$ ${HOME}/${MPCDIR}/config
      rm -f /tmp/mpc$$
      cat ${HOME}/${MPCDIR}/config-art.conf | sed -e "s%^mpd_music_dir.*%mpd_music_dir = ${mpd_music}%" > /tmp/art$$
      cp /tmp/art$$ ${HOME}/${MPCDIR}/config-art.conf
      rm -f /tmp/art$$
    }
    bts_custom=1
    bts_music=`grep ^directory: ${BEETSCONF}`
    [ "${bts_music}" ] || {
      bts_music=`grep \#directory: ${BEETSCONF}`
      bts_custom=
    }
    bts_music=`echo ${bts_music} | awk ' { print $2 } '`
    [ "${mpd_music}" == "${bts_music}" ] || {
      if [ "${bts_custom}" ]
      then
        cat ${BEETSCONF} | \
          sed -e "s%^directory:.*%directory: ${mpd_music}%" \
              -e "s%relative_to:.*%relative_to: ${mpd_music}%" > /tmp/bts$$
      else
        cat ${BEETSCONF} | \
          sed -e "s%#directory:.*%directory: ${mpd_music}%" \
              -e "s%relative_to:.*%relative_to: ${mpd_music}%" > /tmp/bts$$
      fi
      cp /tmp/bts$$ ${BEETSCONF}
      rm -f /tmp/bts$$
    }
    # Don't do beets import here
    # Let the user decide when this potentially lengthy process runs
    #
    # if [ -x ${SCPTDIR}/beet_import.sh ]
    # then
    #   ${SCPTDIR}/beet_import.sh -d "${exp_music}" &
    # else
    #   echo ""
    #   echo "WARNING: Could not locate beets import script"
    #   echo "A manual beets import must be performed by executing the commands:"
    #   echo "    beet import ${exp_music}"
    #   echo "    beet import -ps ${exp_music}"
    # fi

    # Disable and stop any system-wide MPD service
    systemctl is-enabled --quiet mpd.service
    [ $? -eq 0 ] && sudo systemctl disable --quiet mpd.service
    systemctl is-enabled --quiet mpd.socket
    [ $? -eq 0 ] && sudo systemctl disable --quiet mpd.socket
    systemctl is-active --quiet mpd.service
    [ $? -eq 0 ] && sudo systemctl stop --quiet mpd.service
    systemctl is-active --quiet mpd.socket
    [ $? -eq 0 ] && sudo systemctl stop --quiet mpd.socket

    systemctl --user daemon-reload --quiet
    # Enable and activate the MPD user service
    systemctl --user is-active --quiet mpd.service
    if [ $? -eq 0 ]
    then
      # User service is active, restart to pickup any config changes
      systemctl --user restart --quiet mpd.service
    else
      systemctl --user start --quiet mpd.service
    fi
    systemctl --user is-enabled --quiet mpd.service
    [ $? -eq 0 ] || systemctl --user enable --quiet mpd.service
    have_mpc=`type -p mpc`
    [ "${have_mpc}" ] && mpc update --quiet

    # Enable and activate the MPDstats user service
    systemctl --user is-active --quiet mpdstats.service
    if [ $? -eq 0 ]
    then
      # User service is active, restart to pickup any config changes
      systemctl --user restart --quiet mpdstats.service
    else
      systemctl --user start --quiet mpdstats.service
    fi
    systemctl --user is-enabled --quiet mpdstats.service
    [ $? -eq 0 ] || systemctl --user enable --quiet mpdstats.service
  else
    echo "WARNING:"
    echo "Could not detect any music_directory setting in ${MPDCONF}"
    echo "Manual configuration of ${MPDCONF} and ${HOME}/${MPCDIR}/config required"
  fi
}

[ -f ${CONFDIR}/config ] || {
    echo "${CONFDIR}/config does not exist."
    echo "MusicPlayerPlus installation incomplete"
    exit 1
}
[ -f ${CONFDIR}/bindings ] || {
    echo "${CONFDIR}/bindings does not exist."
    echo "MusicPlayerPlus installation incomplete"
    exit 1
}

if [ -f ${CONF}/mpcplus/config ]
then
  MPCDIR=".config/mpcplus"
else
  if [ -f ${HOME}/.mpcplus/config ]
  then
    MPCDIR=".mpcplus"
  else
    [ -d ${CONF}/mpcplus ] || mkdir -p ${CONF}/mpcplus
    cp ${CONFDIR}/config ${CONF}/mpcplus/config
    MPCDIR=".config/mpcplus"
  fi
fi

[ "$1" == "sync" ] && {
  printf "\nSyncing MusicPlayerPlus music directory, please wait ..."
  sync_music_dir
  printf "\n\nMusicPlayerPlus music directory synchronized.\n"
  exit 0
}

printf "\nInitializing MusicPlayerPlus, please wait ..."
[ -f ${HOME}/${MPCDIR}/bindings ] || {
  cp ${CONFDIR}/bindings ${HOME}/${MPCDIR}/bindings
}

for cfg in ${CFGS}
do
  [ -f ${HOME}/${MPCDIR}/${cfg} ] || {
    cp ${CONFDIR}/${cfg} ${HOME}/${MPCDIR}/${cfg}
    chmod 644 ${HOME}/${MPCDIR}/${cfg}
  }
done
for scp in ${SCPS}
do
  [ -f ${HOME}/${MPCDIR}/${scp} ] || {
    cp ${SCPTDIR}/${scp} ${HOME}/${MPCDIR}/${scp}
    chmod 755 ${HOME}/${MPCDIR}/${scp}
  }
done

[ -d ${CONF}/mppcava ] || mkdir -p ${CONF}/mppcava
[ -f ${CONF}/mppcava/config ] || {
  cp ${MPPCDIR}/mppcava/config ${CONF}/mppcava/config
}
[ -f ${CONF}/mppcava/config-tmux ] || {
  cp ${MPPCDIR}/mppcava/config-tmux ${CONF}/mppcava/config-tmux
}

if [ -d ${CONF}/tmuxp ]
then
  for tmc in ${MPPCDIR}/tmuxp/*
  do
    tmcbase=`basename "${tmc}"`
    if [ -d "${tmc}" ]
    then
      [ -d "${CONF}/tmuxp/${tmcbase}" ] || {
        cp -a "${tmc}" "${CONF}/tmuxp/${tmcbase}"
      }
    else
      [ -f "${CONF}/tmuxp/${tmcbase}" ] || {
        cp "${tmc}" "${CONF}/tmuxp/${tmcbase}"
      }
    fi
  done
else
  cp -a ${MPPCDIR}/tmuxp ${CONF}/tmuxp
fi

# If no MusicPlayerPlus and Visualizer terminal profiles exist, create them
declare -a profiles
dconfdir=/org/gnome/terminal/legacy/profiles:
profiles=($(gsettings get org.gnome.Terminal.ProfilesList list | tr -d "[]\',"))

for profile_name in MusicPlayer Visualizer
do
  profile_exists=
  fontsize=8
  [ "${profile_name}" == "MusicPlayer" ] && fontsize=32
  if [ "$profiles" = "" ]
  then
    create_new_profile gnome ${profile_name} ${fontsize}
  else
    for i in ${!profiles[*]}
    do
      visname="$(dconf read $dconfdir/:${profiles[i]}/visible-name)"
      [ "${visname}" == "'${profile_name}'" ] && profile_exists=1
      [ "$profile_exists" ] && break
    done
  fi

  [ "$profile_exists" ] || {
    create_new_profile gnome ${profile_name} ${fontsize}
  }
done

# Create Tilix profiles, similar to Gnome-terminal's
dconfdir=/com/gexperts/Tilix/profiles
profiles=($(gsettings get com.gexperts.Tilix.ProfilesList list | tr -d "[]\',"))

for profile_name in MusicPlayer Visualizer
do
  profile_exists=
  fontsize=8
  [ "${profile_name}" == "MusicPlayer" ] && fontsize=32

  if [ "$profiles" = "" ]
  then
    create_new_profile tilix ${profile_name} ${fontsize}
  else
    for i in ${!profiles[*]}
    do
      visname="$(dconf read $dconfdir/${profiles[i]}/visible-name)"
      [ "${visname}" == "'${profile_name}'" ] && profile_exists=1
      [ "$profile_exists" ] && break
    done
  fi

  [ "$profile_exists" ] || {
    create_new_profile tilix ${profile_name} ${fontsize}
  }
done

# If there is no user MPD config
# then copy the MusicPlayerPlus MPD config folder
# into the user's home and setup user MPD service
[ -f ${MPDCONF} ] || {
  if [ -d ${MPDCONFDIR} ]
  then
    cp ${MPPCDIR}/mpd/mpd.conf ${MPDCONF}
  else
    cp -a ${MPPCDIR}/mpd ${MPDCONFDIR}
  fi
}

# If there is no user beets config
# then copy the MusicPlayerPlus beets config folder
# into the user's home and setup user mpdstats service
[ -f ${BEETSCONF} ] || {
  [ -d ${BEETSCONFDIR} ] || mkdir -p ${BEETSCONFDIR}
  cp ${MPPCDIR}/beets/config.yaml ${BEETSCONF}
}

SYSTEMDIR="${CONF}/systemd/user"
MPDSTATSD="${SYSTEMDIR}/mpdstats.service"
[ -f ${MPDSTATSD} ] || {
  [ -d ${SYSTEMDIR} ] || mkdir -p ${SYSTEMDIR}
  cp ${MPPCDIR}/beets/mpdstats.service ${MPDSTATSD}
}

FIFS="mppcava/config-tmux mppcava/config systemd/user/mpdstats.service"
for cnf in ${FIFS}
do
  [ -f ${CONF}/${cnf} ] || continue
  cat ${CONF}/${cnf} | sed -e "s#/home/USERNAME#$HOME#" > /tmp/cnf$$
  cp /tmp/cnf$$ ${CONF}/${cnf}
  rm -f /tmp/cnf$$
done

# Setup default tmux configuration for this user
[ -f ${MPPCDIR}/tmux.conf ] && {
  if [ -f ${HOME}/.tmux.conf ]
  then
    diff -u -B <(grep -vE '^\s*(#|$)' ${MPPCDIR}/tmux.conf)  <(grep -vE '^\s*(#|$)' ${HOME}/.tmux.conf) > /dev/null || {
      echo ""
      echo "MusicPlayerPlus includes extensive configuration for tmux."
      echo "An existing $HOME/.tmux.conf has been detected."
      echo "In order to enable many MusicPlayerPlus tmux features,"
      echo "it is necessary to install a customized $HOME/.tmux.conf."
      echo ""
      echo "Please answer if you would like to:"
      printf "\n\t[A]ppend customization"
      printf "\n\t[B]ackup and customize"
      printf "\n\t[O]verwrite existing"
      printf "\n\t[S]kip customization\n"
      echo "Answer 'a', 'b', 'o', or 's'"
      echo ""
      while true
      do
        read -p "Append/Backup/Overwrite/Skip tmux configuration? (a/b/o/s) " customize
        case $customize in
          [Aa]* )
              cat ${MPPCDIR}/tmux.conf >> ${HOME}/.tmux.conf
              echo ""
              echo "MusicPlayerPlus tmux configurations are applied"
              echo "The file ${MPPCDIR}/tmux.conf"
              echo "was appended to $HOME/.tmux.conf"
              echo "The MusicPlayerPlus additions follow the comment 'MusicPlayerPlus'"
              echo "Please review these changes and customize as needed"
              break
              ;;
          [Bb]* )
              cp ${HOME}/.tmux.conf ${HOME}/.tmux.conf.bak$$
              cp ${MPPCDIR}/tmux.conf ${HOME}/.tmux.conf
              echo ""
              echo "MusicPlayerPlus tmux configurations are applied"
              echo "The file ${MPPCDIR}/tmux.conf"
              echo "was copied to $HOME/.tmux.conf"
              echo "A backup of the previous file was created at $HOME/.tmux.conf.bak$$"
              break
              ;;
          [Oo]* )
              cp ${MPPCDIR}/tmux.conf ${HOME}/.tmux.conf
              echo ""
              echo "MusicPlayerPlus tmux configurations are applied"
              echo "The file ${MPPCDIR}/tmux.conf"
              echo "was copied to $HOME/.tmux.conf"
              break
              ;;
          [Ss]* )
              echo ""
              echo "MusicPlayerPlus tmux configurations have not been applied"
              echo "The file $HOME/.tmux.conf remains unmodified"
              echo "Some MusicPlayerPlus features will not work properly with tmux"
              echo ""
              echo "The file ${MPPCDIR}/tmux.conf"
              echo "contains the MusicPlayerPlus tmux customizations."
              echo "To fully enable MusicPlayerPlus tmux features, merge"
              echo "${MPPCDIR}/tmux.conf with $HOME/.tmux.conf"
              break
              ;;
          * )
              echo "Please answer 'a', 'b', 'o', or 's'"
              ;;
        esac
      done
    }
  else
    cp ${MPPCDIR}/tmux.conf ${HOME}/.tmux.conf
  fi
}

TPM="${HOME}/.tmux/plugins/tpm"

[ -d ${TPM} ] || {
  have_git=`type -p git`
  [ "${have_git}" ] && {
    git clone https://github.com/tmux-plugins/tpm ${TPM} > /dev/null 2>&1
  }
}

[ -x ${TPM}/bin/install_plugins ] && ${TPM}/bin/install_plugins > /dev/null 2>&1

# If there is no user beets plugin folder
# then copy the MusicPlayerPlus beets plugin folder
# into the user's home and install these plugins
for plugin in ${MPPCDIR}/beets/plugins/*
do
  [ "${plugin}" == "${MPPCDIR}/beets/plugins/*" ] && continue
  [ -d "${plugin}" ] && {
    plugbase=`basename "${plugin}"`
    [ -d "${BEETSCONFDIR}/plugins/${plugbase}" ] || {
      # Inside the loop so it does not get created unless needed
      [ -d ${BEETSCONFDIR}/plugins ] || mkdir -p ${BEETSCONFDIR}/plugins
      cp -a "${plugin}" "${BEETSCONFDIR}/plugins/${plugbase}"
    }
  }
done

for plugin in ${BEETSCONFDIR}/plugins/*
do
  [ "${plugin}" == "${BEETSCONFDIR}/plugins/*" ] && continue
  [ -x "${plugin}/setup.py" ] && {
    cd "${plugin}"
    ./setup.py install --user > /dev/null 2>&1
  }
done

have_pip=`type -p pip`
if [ "${have_pip}" ]
then
  for pkg in asciimatics beautifulsoup4 beets pylast beets-describe \
             beets-extrafiles python-mpd2 requests sacad tmuxp ueberzug
  do
    if pip list | grep ${pkg} > /dev/null
    then
      python -m pip install --upgrade ${pkg} > /dev/null 2>&1
    else
      python -m pip install ${pkg} > /dev/null 2>&1
    fi
  done
else
  echo ""
  echo "WARNING: Python pip module not found."
  echo "Pip is required to install several MusicPlayerPlus components."
  echo ""
  echo "Install the Python pip module with:"
  printf "\n\tsudo apt install python3-pip\n"
  echo "or"
  printf "\n\tsudo dnf install python3-pip\n"
  echo ""
  echo "After verifying that pip is installed,"
  echo "rerun the 'mpcinit' MusicPlayer initialization."
fi

# Patch beets-extrafiles plugin
have_extra=
SITE=`python -m site --user-site`
EXTR="${SITE}/beetsplug/extrafiles.py"
if [ -f "${EXTR}" ]
then
  have_extra="${EXTR}"
else
  SITE=`python -m pip show beets-extrafiles | grep Location: | awk ' { print $2 } '`
  EXTR="${SITE}/beetsplug/extrafiles.py"
  [ -f "${EXTR}" ] && have_extra="${EXTR}"
fi

[ "${have_extra}" ] && {
  grep beets.mediafile "${have_extra}" > /dev/null && {
    cat "${have_extra}" | sed -e "s/beets.mediafile/mediafile/" -e "s/TYPES/TYPES.keys()/" > /tmp/ext$$
    cp /tmp/ext$$ "${have_extra}"
    rm -f /tmp/ext$$
  }
}

sync_music_dir

printf "\n${BOLD}MusicPlayerPlus Initialization Complete${NORM}\n"
printf "\nDownload album cover art with the command:"
printf "\n\t${BOLD}mpplus -D${NORM}\n"
printf "\nImport your music library into the Beets Music Organizer with the command:"
printf "\n\t${BOLD}mpplus -I${NORM}"
printf "\n\tor to enable auto-tagging:"
printf "\n\t${BOLD}mpplus -I -a${NORM}\n"
printf "\nVisit the MusicPlayerPlus Wiki at:"
printf "\n\t${BOLD}https://github.com/doctorfree/MusicPlayerPlus/wiki${NORM}\n"

# type -p mppsplash > /dev/null && {
#   while true
#   do
#     read -p "View a MusicPlayerPlus ASCII animation ? (y/n) " yn
#     case $yn in
#       [Yy]* )
#               mppsplash -c 1 -a
#               break
#               ;;
#       [Nn]* )
#               printf "\nExiting.\n"
#               exit 0
#               ;;
#           * ) echo "Please answer yes or no."
#               ;;
#     esac
#   done
# }
