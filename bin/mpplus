#!/bin/bash
#
# mpplus - Run mpcplus and visualizer in separate terminal emulators,
#          cantata and mppcava in separate windows, or a specified
#          MPD client and visualizer in separate windows. Alternately,
#          Run an ASCIImatics animation optionally accompanied
#          by specified audio.
#
#          Can also download album cover art or kill tmux sessions.
#
# Written by Ronald Joe Record <ronaldrecord@gmail.com>
# March, 2022
#
# I am using two separate terminal emulators as I want a smaller
# font for the visualizer terminal. The terminal command options are
# customized for my setup, you may need to adjust the geometry
# to get the two windows to align as desired. I wanted the visualizer
# terminal window at the bottom of the screen and aligned with
# the mpcplus terminal window.
#
# If the "-t" option is specified then only a single terminal
# emulator is used, tilix. Tilix is invoked twice with different
# profiles, one for mpcplus and another for the visualizer.
# The profiles are named "MusicPlayer" and "Visualizer". 
#
# In both types of invocations, with or without "-t", the terminal
# profiles used have font sizee settings of 32 and 8 for mpcplus and
# visualizer, respectively. This aligns the windows, on my system, when
# not in fullscreen mode.
#
# When using the cool-retro-term for mpcplus (-r option), adjust the
# size of the cool-retro-term window manually so it aligns with the
# visualizer window. I could not figure out how to specify a geometry
# for the cool-retro-term window when invoked with "-e mpcplus".
#
# Note also that the key bindings I have configured for mpcplus
# to dynamically set the transparency of the terminal window only
# work when using xfce4-terminal for mpcplus.
#
# Cantata can be used as the MPD client, replacing the invocation of a
# terminal emulator running mpcplus with direct invocation of cantata.
# In addition, an alternate MPD client can be specified on the command line.

BOLD=$(tput bold)
NORMAL=$(tput sgr0)
PLEASE="Please enter your"
VTITLE="Spectrum Visualizer"
MTITLE="Music Player Plus"
VISUALIZER=mppcava
CONSOLE_MODE=
DO_NOT_EXIT=
USE_GRAD=1
MPP_DIR="/usr/share/musicplayerplus"
SCRIPTS="${MPP_DIR}/scripts"

usage() {
  printf "\nUsage: mpplus [-A] [-a] [-b] [-c] [-C client] [-D] [-d music_directory]"
  printf "\n\t\t[-g] [-F] [-f] [-h] [-I] [-i] [-jJ] [-k] [-L] [-m]"
  printf "\n\t\t[-M alsaconf|enable|disable|restart|start|stop|status] [-n num]"
  printf "\n\t\t[-N] [-p] [-P script] [-q] [-r] [-R] [-s song] [-S] [-t] [-T]"
  printf "\n\t\t[-u] [-v viz_comm] [-w|W] [-X query] [-y] [-Y] [-z fzmpopt]"
  printf "\nMPCplus/Visualizer options:"
  printf "\n\t-A indicates display album cover art (implies tmux session)"
  printf "\n\t-c indicates use cantata MPD client rather than mpcplus"
  printf "\n\t-C 'client' indicates use 'client' MPD client rather than mpcplus"
  printf "\n\t-f indicates fullscreen display"
  printf "\n\t-g indicates do not use gradient colors for spectrum visualizer"
  printf "\n\t-h indicates half-height for visualizer window (with -f only)"
  printf "\n\t-P script specifies the ASCIImatics script to run in visualizer pane"
  printf "\n\t-q indicates quarter-height for visualizer window (with -f only)"
  printf "\n\t-r indicates use retro terminal emulator"
  printf "\n\t-t indicates use tilix terminal emulator"
  printf "\n\t-v 'viz_comm' indicates use visualizer 'viz_comm' rather than mppcava"
  printf "\nASCIImatics animation options:"
  printf "\n\t-a indicates play audio during ASCIImatics display"
  printf "\n\t-b indicates use backup audio during ASCIImatics display"
  printf "\n\t-j indicates use Julia Set scenes in ASCIImatics display"
  printf "\n\t-J indicates Julia Set with several runs using different parameters"
  printf "\n\t-m indicates use MusicPlayerPlus scenes in ASCIImatics display"
  printf "\n\t-n num specifies the number of times to cycle ASCIImatics scenes"
  printf "\n\t-N indicates use alternate comments in Plasma ASCIImatics scenes"
  printf "\n\t-p indicates use Plasma scenes in ASCIImatics display"
  printf "\n\t-s song specifies a song to accompany an ASCIImatics animation"
  printf "\n\t\t'song' can be the full pathname to an audio file or a"
  printf "\n\t\trelative pathname to an audio file in the MPD music library"
  printf "\n\t\tor $HOME/Music/"
  printf "\n\t-S indicates display ASCIImatics splash animation"
  printf "\nGeneral options:"
  printf "\n\t-D indicates download album cover art and exit"
  printf "\n\t-d 'music_directory' specifies the music directory to use for"
  printf "\n\t\tdownloaded album cover art (without this option -D will use"
  printf "\n\t\tthe 'music_directory' setting in '~/.config/mpd/mpd.conf'"
  printf "\n\t-F indicates convert all WAV format files in the music library"
  printf "\n\t\tto MP3 format files and exit. A subsequent 'mpplus -I' import"
  printf "\n\t\twill be necessary to import these newly converted music files."
  printf "\n\t-I indicates import albums and songs from 'music_directory' to beets and exit"
  printf "\n\t\tIn conjunction with '-I', the '-A' flag disables auto-tagging"
  printf "\n\t-i indicates start mpplus in interactive mode"
  printf "\n\t-k indicates kill MusicPlayerPlus tmux sessions and ASCIImatics scripts"
  printf "\n\t-L indicates download lyrics to the Beets library and exit"
  printf "\n\t-M 'action' can be used to control the Music Player Daemon (MPD)"
  printf "\n\t    or configure the ALSA sound system"
  printf "\n\t\tALSA configuration will update the ALSA configuration in '/etc/asound.conf'"
  printf "\n\t-R indicates record tmux session with asciinema"
  printf "\n\t-T indicates use a tmux session for either ASCIImatics or mpcplus"
  printf "\n\t-w indicates write metadata during beets import"
  printf "\n\t-W indicates do not write metadata during beets import"
  printf "\n\t-X 'query' performs an analysis and retrieval of audio-based information"
  printf "\n\t\tfor all music library media matching 'query'. A query of 'all' performs"
  printf "\n\t\tthe analysis  and retrieval on the entire music library."
  printf "\n\t-Y initializes the YAMS last.fm scrobbler service"
  printf "\n\t-y disables the YAMS last.fm scrobbler service"
  printf "\n\t-z fzmpopt specifies the fzmp option and invokes fzmp to"
  printf "\n\t\tlist/search/select media in the MPD library."
  printf "\n\t\tValid values for fzmpopt are 'a', 'A', 'g', 'p', or 'P'"
  printf "\n\t-u displays this usage message and exits\n"
  printf "\nType 'man mpplus' for detailed usage info on mpplus"
  printf "\nType 'man mpcplus' for detailed usage info on the mpcplus MPD client"
  printf "\nType 'man mppsplash' for detailed usage info on the mppsplash command\n"
  exit 1
}

kill_tmux_sessions() {
  SESSIONS="musicplayerplus mppsplash"
  for session in ${SESSIONS}
  do
    ps -ef | grep tmux | grep ${session} > /dev/null && {
      tmux kill-session -t ${session}
    }
  done
  ASCIIS="mppjulia mpprocks mppplasma"
  for ascii in ${ASCIIS}
  do
    ps -ef | grep -v grep | grep ${ascii} > /dev/null && {
      ps -ef | grep -v grep | grep ${ascii} | while IFS= read -r line
      do
        pid=`echo "$line" | awk ' { print $2 } '`
        kill ${pid}
      done 
    }
  done
}

make_it_so() {
  [ "${CONVERT_WAV}" ] && {
    if [ -x ${SCRIPTS}/wav2mp3.sh ]
    then
      printf "\nConverting WAV files\n"
      if [ "${MUSIC_DIRECTORY}" ]
      then
        ${SCRIPTS}/wav2mp3.sh -d "${MUSIC_DIRECTORY}"
      else
        ${SCRIPTS}/wav2mp3.sh
      fi
    else
      echo "${SCRIPTS}/wav2mp3.sh not found or not executable"
      echo "Check your MusicPlayerPlus installation"
      echo ""
      echo "Manual media file conversion may be required"
    fi
    [ "${DO_NOT_EXIT}" ] || exit 0
  }

  [ "${DOWNLOAD_ART}" ] && {
    if [ -x ${SCRIPTS}/download_cover_art.sh ]
    then
      printf "\n\tDownloading album cover art ..."
      if [ "${MUSIC_DIRECTORY}" ]
      then
        ${SCRIPTS}/download_cover_art.sh -d "${MUSIC_DIRECTORY}"
      else
        ${SCRIPTS}/download_cover_art.sh
      fi
      printf " done\n\n"
    else
      echo "${SCRIPTS}/download_cover_art.sh not found or not executable"
      echo "Check your MusicPlayerPlus installation"
      echo ""
      echo "Manual cover art download may be required:"
      printf "\n\tsacad_r <MUSIC_DIRECTORY> 600 cover.jpg"
      printf "\nWhere <MUSIC_DIRECTORY> is the full pathname to your music library\n"
    fi
    [ "${DO_NOT_EXIT}" ] || exit 0
  }

  [ "${ACT_YAMS}" ] && {
    if [ "${need_yams}" ]
    then
      YAMSCOMM=
      have_yams=`type -p yams`
      if [ "${have_yams}" ]
      then
        YAMSCOMM=yams
      else
        [ -x ${HOME}/.local/bin/yams ] && {
          YAMSCOMM="${HOME}/.local/bin/yams"
        }
      fi
      if [ "${YAMSCOMM}" ]
      then
        printf "\n\tInitializing YAMS last.fm scrobbler service\n"
        printf "\n\tOpen the token URL to authenticate with Last.fm\n\n"
        ${YAMSCOMM} -k > /dev/null 2>&1
        ${YAMSCOMM}
        ${YAMSCOMM} -k > /dev/null 2>&1
        if [ -f "${HOME}/.config/yams/yams.yml" ]
        then
          need_yams=
        else
          need_yams=1
        fi
        if [ "${need_yams}" ]
        then
          echo "YAMS not activated."
          echo "Activate YAMS manually by executing the command 'yams'."
        else
          # Prepare the yams scrobbler user service for later activation
          systemctl --user is-active --quiet yams.service
          if [ $? -eq 0 ]
          then
            # User service is active, restart to pickup any config changes
            systemctl --user restart --quiet yams.service
          else
            systemctl --user start --quiet yams.service
          fi
          systemctl --user is-enabled --quiet yams.service
          [ $? -eq 0 ] || systemctl --user enable --quiet yams.service
          echo ""
          echo "YAMS Last.fm scrobbler activated and running as a service."
          echo "Music played with MusicPlayerPlus should be reflected"
          echo "in your Last.fm account statistics."
          echo ""
          echo "To disable YAMS run the command 'mpplus -y'."
          echo ""
        fi
      else
        echo "The yams front-end not found or not executable."
        echo "Check your MusicPlayerPlus installation."
        echo "Yams can be installed with the command:"
        echo "    python3 -m pip install YAMScrobbler"
        echo ""
      fi
      [ "${DO_NOT_EXIT}" ] || exit 0
    else
      echo "A YAMS service has been detected."
      echo "This may indicate YAMS has already been activated."
      echo "To re-activate YAMS, disable and de-activate the YAMS service:"
      echo "    systemctl --user disable yams.service"
      echo "    systemctl --user stop yams.service"
      echo "and re-run the command 'mpplus -Y'"
      [ "${DO_NOT_EXIT}" ] || exit 0
    fi
  }

  [ "${DIS_YAMS}" ] && {
    # Disable YAMS service
    echo "Disabling YAMS Last.fm scrobbler service"
    echo "and removing YAMS configuration $HOME/.config/yams/"
    while true
    do
      read -p "Continue to disable and remove YAMS configuration ? (y/n) " yn
      case $yn in
        [Yy]* )
              systemctl --user disable yams.service
              systemctl --user stop yams.service
              rm -rf ${HOME}/.config/yams
              printf "\n\nYAMS disabled and configuration removed."
              printf "\nTo re-enable YAMS run the command 'mpplus -Y'.\n"
              exit 0
              ;;
        [Nn]* )
              printf "\n\nYAMS service left as-is, no changes made."
              printf "\nExiting.\n"
              exit 0
              ;;
            * ) echo "Please answer yes or no."
              ;;
      esac
    done
  }

  [ "${FETCH_LYRICS}" ] && {
    have_beet=`type -p beet`
    if [ "${have_beet}" ]
    then
      echo ""
      echo "===================================================================="
      echo "Fetching lyrics for all songs in the music library which do not"
      echo "already contain lyrics. This can take several minutes or hours"
      echo "depending on how many songs need lyrics."
      echo ""
      echo "The process is performed in the background and non-interactively."
      echo "As long as your computer remains on and connected to the Internet, the"
      echo "process should run uninterrupted and without need for attention."
      echo "You may continue working and leave the lyrics update unattended."
      echo ""
      LLOG="/tmp/lyrics_$$.log"
      nohup beet lyrics > ${LLOG} 2>&1 &
      beetpid=$!
      if [ "${CONSOLE_MODE}" ]
      then
        echo "To monitor the progress of the lyrics downloads, examine the log:"
        echo ""
        echo "tail -f ${LLOG}"
      else
        echo "A terminal window will be opened to monitor the progress."
        echo ""
        gnome-terminal --title="Beets Lyrics Log" --geometry=90x25+50+25 \
                       -- tail --pid=${beetpid} -f ${LLOG} &
      fi
      echo "===================================================================="
      echo ""
    else
      echo "The 'beet' command is not in your PATH or is not executable."
      echo "Check your MusicPlayerPlus installation."
      echo "Once the 'beet' command is executable and in the execution PATH,"
      echo "Re-run this command."
    fi
    [ "${DO_NOT_EXIT}" ] || exit 0
  }

  [ "${XTRACTOR}" ] && {
    have_beet=`type -p beet`
    if [ "${have_beet}" ]
    then
      echo ""
      echo "===================================================================="
      echo "Performing audio analysis and audio-based information retrieval"
      echo "for media matching ${XTRACTOR} in the Beets music library management"
      echo "system. The analysis and retrieval can take several minutes per"
      echo "album. A large music library may take several hours to extract."
      echo ""
      echo "The process is performed in the background and non-interactively."
      echo "As long as your computer remains on and connected to the Internet, the"
      echo "process should run uninterrupted and without need for attention."
      echo "You may continue working and leave the extraction unattended."
      echo ""
      if [ "${XTRACTOR}" == "all" ]
      then
        extquery=
      else
        extquery="${XTRACTOR}"
      fi
      XLOG="/tmp/xtractor_$$.log"
      nohup beet -v xt ${extquery} > ${XLOG} 2>&1 &
      beetpid=$!
      if [ "${CONSOLE_MODE}" ]
      then
        echo "To monitor the progress of the extraction, examine the extraction log:"
        echo ""
        echo "tail -f ${XLOG}"
      else
        echo "A terminal window will be opened to monitor the progress of the extraction."
        echo ""
        gnome-terminal --title="Beets Extraction Log" --geometry=90x25+50+25 \
                       -- tail --pid=${beetpid} -f ${XLOG} &
      fi
      echo "===================================================================="
      echo ""
    else
      echo "The 'beet' command is not in your PATH or is not executable."
      echo "Check your MusicPlayerPlus installation."
      echo "Once the 'beet' command is executable and in the execution PATH,"
      echo "Re-run this command."
    fi
    [ "${DO_NOT_EXIT}" ] || exit 0
  }

  [ "${BEETS_IMPORT}" ] && {
    if [ -x ${SCRIPTS}/beet_import.sh ]
    then
      echo ""
      echo "===================================================================="
      echo "Importing, tagging, and organizing your music library with the Beets"
      echo "media library management system. The import can take about a minute"
      echo "per album. A large music library may take several hours to import."
      echo ""
      echo "The import process is performed in the background and non-interactively."
      echo "As long as your computer remains on and connected to the Internet, the"
      echo "import process should run uninterrupted and without need for attention."
      echo "You may continue working and leave the import unattended."
      echo ""

      if [ "${MUSIC_DIRECTORY}" ]
      then
        nohup ${SCRIPTS}/beet_import.sh ${impflags} -d "${MUSIC_DIRECTORY}" > /dev/null 2>&1 &
      else
        nohup ${SCRIPTS}/beet_import.sh ${impflags} > /dev/null 2>&1 &
      fi
      # beetpid=`ps -ef | grep beet_import.sh | grep -v grep | awk ' { print $2 } '`
      beetpid=$!
      if [ "${CONSOLE_MODE}" ]
      then
        echo "To monitor the progress of the import, examine the import time log:"
        echo ""
        echo "tail -f $HOME/.config/beets/import_time.log"
      else
        echo "A terminal window will be opened to monitor the progress of the import."
        echo ""
        echo "Beets log files can be found in $HOME/.config/beets/"
        gnome-terminal --title="Beets Import Log" --geometry=90x25+50+25 \
                       -- tail --pid=${beetpid} -f $HOME/.config/beets/import_time.log &
      fi
      echo "===================================================================="
      echo ""
    else
      echo "${SCRIPTS}/beet_import.sh not found or not executable"
      echo "Check your MusicPlayerPlus installation"
      echo ""
      echo "Manual beets import may be required:"
      printf "\n\tbeet import -[w|W] <MUSIC_DIRECTORY>"
      printf "\n\tbeet import -[w|W]ps <MUSIC_DIRECTORY>"
      printf "\nWhere <MUSIC_DIRECTORY> is the full pathname to your music library,"
      printf "\n-w indicates write metadata, -W indicates do not write metadata\n"
    fi
    [ "${DO_NOT_EXIT}" ] || exit 0
  }

  # Begin visualizer startup section
  #
  # Do not start visualizer here if we are going to start a tmux session
  # or if we are displaying an asciimatics animation
  [ "${TMUX_MPC}" ] || [ "${SPLASH}" ] || {
    if [ "${FULLSCREEN}" ]
    then
      if [ "${TILIX}" ]
      then
        tilix --title="${VTITLE}" \
              --full-screen \
              --window-style=borderless \
              --profile=Visualizer \
              --command="${VISUALIZER}" 2> /dev/null &
      else
        gnome-terminal --title="${VTITLE}" \
              --profile=Visualizer \
              --hide-menubar \
              --full-screen \
              -- ${VISUALIZER} &
      fi
      [ "${HALFHEIGHT}" ] || [ "${QRTRHEIGHT}" ] && {
        sleep 1
        if [ "${TILIX}" ]
        then
          viz_win=`wmctrl -l -G -x | grep tilix.Tilix | grep "${VTITLE}"`
        else
          viz_win=`wmctrl -l -G -x | grep gnome-terminal-server | grep "${VTITLE}"`
        fi
        [ "${viz_win}" ] || {
          if [ "${TILIX}" ]
          then
            viz_win=`wmctrl -l -G -x | grep tilix.Tilix | grep "${VISUALIZER}"`
            [ "${viz_win}" ] || echo "Could not find visualizer window"
          else
            viz_win=`wmctrl -l -G -x | grep gnome-terminal-server | grep "${VISUALIZER}"`
            [ "${viz_win}" ] || echo "Could not find visualizer window"
          fi
        }
        [ "${viz_win}" ] && {
          winid=`echo ${viz_win} | awk ' { print $1 } '`
          grav=`echo ${viz_win} | awk ' { print $2 } '`
          xoff=`echo ${viz_win} | awk ' { print $3 } '`
          yoff=`echo ${viz_win} | awk ' { print $4 } '`
          width=`echo ${viz_win} | awk ' { print $5 } '`
          height=`echo ${viz_win} | awk ' { print $6 } '`
          [ "${winid}" ] && {
            if [ "${HALFHEIGHT}" ]
            then
              height=$((height / 2))
            else
              height=$((height / 4))
              # Fudge this to compensate for differing window decoration size
              [ "${TILIX}" ] || height=$((height - 30))
            fi
            mvarg="${grav},${xoff},${yoff},${width},${height}"
            wmctrl -i -r "${winid}" -b "remove,fullscreen,maximized_vert"
            wmctrl -i -r "${winid}" -e "${mvarg}"
          }
        }
      }
    else
      if [ "${TILIX}" ]
      then
        tilix --title="${VTITLE}" \
              --window-style=borderless \
              --geometry=390x16+150-0 \
              --profile=Visualizer \
              --command="${VISUALIZER}" 2> /dev/null &
      else
        gnome-terminal --title="${VTITLE}" \
              --profile=Visualizer \
              --hide-menubar \
              --geometry 390x16+150-0 \
              -- ${VISUALIZER} &
      fi
    fi
    sleep 1
  }
  # End visualizer startup section

  # Fullscreen tmux sessions and ASCIImatics Animations
  [ "${SPLASH}" ] || [ "${TMUX_MPC}" ] && FULLSCREEN=1

  # Set the command to use based on command line switches (-S, -T)
  MPCOMM="${MPCPLUS}"
  if [ "${SPLASH}" ]
  then
    if [ "${TMUX_SPLASH}" ]
    then
      MPCOMM="${MPPSPLASH_TMUX}"
    else
      MPCOMM="${MPPSPLASH}"
    fi
  else
    [ "${TMUX_MPC}" ] && MPCOMM="${MPCPLUS_TMUX}"
  fi

  # Begin MPD client startup section
  if [ "${CONSOLE_MODE}" ] || [ "${TMUX_MPC}" ]
  then
    ${MPCOMM}
  else
    if [ "${RETRO}" ]
    then
      if [ "${FULLSCREEN}" ]
      then
        cool-retro-term --fullscreen -e "${MPCOMM}" 2> /dev/null
      else
        cool-retro-term -e "${MPCOMM}" 2> /dev/null
      fi
    else
      if [ "${FULLSCREEN}" ]
      then
        if [ "${TILIX}" ]
        then
          tilix --title="${MTITLE}" \
                --full-screen \
                --window-style=borderless \
                --profile=MusicPlayer \
                --command="${MPCOMM}" 2> /dev/null
        else
          gnome-terminal --title="${MTITLE}" \
                --profile=MusicPlayer \
                --hide-menubar \
                --full-screen \
                -- ${MPCOMM}
        fi
      else
        if [ "${TILIX}" ]
        then
          tilix --title="${MTITLE}" \
                --window-style=borderless \
                --geometry=90x20+150+25 \
                --profile=MusicPlayer \
                --command="${MPCOMM}" 2> /dev/null
        else
          gnome-terminal --title="${MTITLE}" \
                --profile=MusicPlayer \
                --hide-menubar \
                --geometry=90x20+150+25 \
                -- ${MPCOMM}
        fi
      fi
    fi
  fi
  # End MPD client startup section
}

mpp_service() {
  MPP_SERVICE_ACTION=$1
  SERVICE=${2}.service
  case ${MPP_SERVICE_ACTION} in
    alsaconf)
      echo "Executing: sudo alsa_conf -e -m"
      sudo alsa_conf -e -m
      ;;
    start|stop|disable|enable|restart)
      echo "Executing: systemctl --user ${MPP_SERVICE_ACTION} ${SERVICE}"
      systemctl --user ${MPP_SERVICE_ACTION} ${SERVICE}
      ;;
    status)
      echo "Executing: systemctl --user --full ${MPP_SERVICE_ACTION} ${SERVICE}"
      systemctl --user --full ${MPP_SERVICE_ACTION} ${SERVICE}
      ;;
    *)
      echo "Unrecognized service action: ${MPP_SERVICE_ACTION}"
      ;;
  esac
}

show_services_menu() {
  while true
  do
    systemctl --user is-active mpd.service >/dev/null 2>&1 && m_active="active" || m_active="inactive"
    systemctl --user is-enabled mpd.service >/dev/null 2>&1 && m_enabled="enabled" || m_enabled="disabled"
    systemctl --user is-active mpdstats.service >/dev/null 2>&1 && s_active="active" || s_active="inactive"
    systemctl --user is-enabled mpdstats.service >/dev/null 2>&1 && s_enabled="enabled" || s_enabled="disabled"
    systemctl --user is-active yams.service >/dev/null 2>&1 && y_active="active" || y_active="inactive"
    systemctl --user is-enabled yams.service >/dev/null 2>&1 && y_enabled="enabled" || y_enabled="disabled"
    printf "\nCurrent status of MusicPlayerPlus Services:"
    printf "\n\tMusic Player Daemon service is ${m_enabled} and ${m_active}"
    printf "\n\tMusic Player Stats service is ${s_enabled} and ${s_active}"
    printf "\n\tMusic Player Last.fm Scrobbler service is ${y_enabled} and ${y_active}\n\n"
    PS3="${BOLD}${PLEASE} command choice (numeric or text): ${NORMAL}"
    options=("Configure ALSA Sound System" "Enable Music Player Daemon" "Disable Music Player Daemon" "Start Music Player Daemon" "Stop Music Player Daemon" "Restart Music Player Daemon" "Status of Music Player Daemon")
    options+=("Enable Music Player Stats" "Disable Music Player Stats" "Start Music Player Stats" "Stop Music Player Stats" "Restart Music Player Stats" "Status of Music Player Stats")
    options+=("Enable Music Player Scrobbler" "Disable Music Player Scrobbler" "Start Music Player Scrobbler" "Stop Music Player Scrobbler" "Restart Music Player Scrobbler" "Status of Music Player Scrobbler")
    options+=("Main menu" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "Main menu",*|*,"Main menu"|"Back",*|*,"Back"|"back",*|*,"back")
              printf "Returning\n\n"
              init_vars
              break 2
              ;;
          "Configure ALSA Sound System",*|*,"Configure ALSA Sound System")
              mpp_service alsaconf
              break
              ;;
          "Enable Music Player Daemon",*|*,"Enable Music Player Daemon")
              mpp_service enable mpd
              break
              ;;
          "Disable Music Player Daemon",*|*,"Disable Music Player Daemon")
              mpp_service disable mpd
              break
              ;;
          "Start Music Player Daemon",*|*,"Start Music Player Daemon")
              mpp_service start mpd
              break
              ;;
          "Stop Music Player Daemon",*|*,"Stop Music Player Daemon")
              mpp_service stop mpd
              break
              ;;
          "Restart Music Player Daemon",*|*,"Restart Music Player Daemon")
              mpp_service restart mpd
              break
              ;;
          "Status of Music Player Daemon",*|*,"Status of Music Player Daemon")
              mpp_service status mpd
              break
              ;;
          "Enable Music Player Stats",*|*,"Enable Music Player Stats")
              mpp_service enable mpdstats
              break
              ;;
          "Disable Music Player Stats",*|*,"Disable Music Player Stats")
              mpp_service disable mpdstats
              break
              ;;
          "Start Music Player Stats",*|*,"Start Music Player Stats")
              mpp_service start mpdstats
              break
              ;;
          "Stop Music Player Stats",*|*,"Stop Music Player Stats")
              mpp_service stop mpdstats
              break
              ;;
          "Restart Music Player Stats",*|*,"Restart Music Player Stats")
              mpp_service restart mpdstats
              break
              ;;
          "Status of Music Player Stats",*|*,"Status of Music Player Stats")
              mpp_service status mpdstats
              break
              ;;
          "Enable Music Player Scrobbler",*|*,"Enable Music Player Scrobbler")
              mpp_service enable yams
              break
              ;;
          "Disable Music Player Scrobbler",*|*,"Disable Music Player Scrobbler")
              mpp_service disable yams
              break
              ;;
          "Start Music Player Scrobbler",*|*,"Start Music Player Scrobbler")
              mpp_service start yams
              break
              ;;
          "Stop Music Player Scrobbler",*|*,"Stop Music Player Scrobbler")
              mpp_service stop yams
              break
              ;;
          "Restart Music Player Scrobbler",*|*,"Restart Music Player Scrobbler")
              mpp_service restart yams
              break
              ;;
          "Status of Music Player Scrobbler",*|*,"Status of Music Player Scrobbler")
              mpp_service status yams
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              printf "\nExiting\n"
              exit 0
              ;;
      esac
      REPLY=
    done
  done
  init_vars
}

show_fzmp_menu() {
  while true
  do
    PS3="${BOLD}${PLEASE} command choice (numeric or text): ${NORMAL}"
    options=("Search artist filtered by album")
    options+=("Search all songs in library")
    options+=("List genres in library")
    options+=("Search current playlist")
    options+=("List saved playlists")
    options+=("Main menu" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "Main menu",*|*,"Main menu"|"Back",*|*,"Back"|"back",*|*,"back")
              printf "Returning\n\n"
              init_vars
              break 2
              ;;
          "Search artist"*,*|*,"Search artist"*)
              fzmp -a
              break
              ;;
          "Search all"*,*|*,"Search all"*)
              fzmp -A
              break
              ;;
          "List genre"*,*|*,"List genre"*)
              fzmp -g
              break
              ;;
          "Search current"*,*|*,"Search current"*)
              fzmp -p
              break
              ;;
          "List saved"*,*|*,"List saved"*)
              fzmp -P
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              printf "\nExiting\n"
              exit 0
              ;;
      esac
    done
  done
}

show_ascii_menu() {
  while true
  do
    SPLASH=1
    if [ "${COVER_ART}" ]
    then
      coverstat="ON"
    else
      coverstat="OFF"
    fi
    if [ "${AUDIO}" ]
    then
      audiostat="ON"
    else
      audiostat="OFF"
    fi
    if [ "${RECORD}" ]
    then
      recordstat="ON"
    else
      recordstat="OFF"
    fi
    if [ "${USE_TMUX}" ]
    then
      usetmux="ON"
    else
      usetmux="OFF"
    fi
    skip_it_so=
    PS3="${BOLD}${PLEASE} command choice (numeric or text): ${NORMAL}"
    options=("Julia Set ASCIImatics Animation" "MPPlus ASCIImatics Animation" "Plasma ASCIImatics Animation" "Toggle Audio (${audiostat})")
    [ "${have_uebz}" ] && options+=("Toggle Show Cover Art (${coverstat})")
    [ "${have_nema}" ] && options+=("Toggle Record Tmux Session (${recordstat})")
    options+=("Toggle Use Tmux (${usetmux})" "Main menu" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "Main menu",*|*,"Main menu"|"Back",*|*,"Back"|"back",*|*,"back")
              printf "Returning\n\n"
              init_vars
              break 2
              ;;
          "Julia Set ASCIImatics Animation",*|*,"Julia Set ASCIImatics Animation")
              MPPSPLASH="${MPPSPLASH} -j"
              MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l julia"
              break
              ;;
          "MPPlus ASCIImatics Animation",*|*,"MPPlus ASCIImatics Animation")
              MPPSPLASH="${MPPSPLASH} -m"
              MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l rocks"
              break
              ;;
          "Plasma ASCIImatics Animation",*|*,"Plasma ASCIImatics Animation")
              MPPSPLASH="${MPPSPLASH} -p"
              MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l plasma"
              break
              ;;
          "Toggle Show Cover Art"*,*|*,"Toggle Show Cover Art"*)
              if [ "${COVER_ART}" ]
              then
                COVER_ART=
              else
                COVER_ART=1
              fi
              if [ "${COVER_ART}" ]
              then
                TMUX_MPC=1
                MPCPLUS_TMUX="${MPCPLUS_TMUX} -a"
              else
                TMUX_MPC=
                MPCPLUS_TMUX=`echo ${MPCPLUS_TMUX} | sed -e "s/ -a//"`
              fi
              skip_it_so=1
              break
              ;;
          "Toggle Audio"*,*|*,"Toggle Audio"*)
              if [ "${AUDIO}" ]
              then
                AUDIO=
              else
                AUDIO=1
              fi
              if [ "${AUDIO}" ]
              then
                MPPSPLASH="${MPPSPLASH} -a"
                MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -a"
              else
                MPPSPLASH=`echo ${MPPSPLASH} | sed -e "s/ -a//"`
                MPPSPLASH_TMUX=`echo ${MPPSPLASH_TMUX} | sed -e "s/ -a//"`
              fi
              skip_it_so=1
              break
              ;;
          "Toggle Record Tmux Session"*,*|*,"Toggle Record Tmux Session"*)
              if [ "${RECORD}" ]
              then
                RECORD=
              else
                RECORD=1
                USE_TMUX=1
              fi
              if [ "${RECORD}" ]
              then
                MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -R"
              else
                MPPSPLASH_TMUX=`echo ${MPPSPLASH_TMUX} | sed -e "s/ -R//"`
              fi
              skip_it_so=1
              break
              ;;
          "Toggle Use Tmux"*,*|*,"Toggle Use Tmux"*)
              if [ "${USE_TMUX}" ]
              then
                USE_TMUX=
                RECORD=
              else
                USE_TMUX=1
              fi
              skip_it_so=1
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              printf "\nExiting\n"
              exit 0
              ;;
      esac
      REPLY=
    done
    [ "${skip_it_so}" ] || {
      make_it_so
      init_vars
    }
  done
  init_vars
}

show_main_menu() {
  while true
  do
    if [ "${FULLSCREEN}" ]
    then
      fullstat="ON"
    else
      fullstat="OFF"
    fi
    if [ "${RECORD}" ]
    then
      recordstat="ON"
    else
      recordstat="OFF"
    fi
    if [ "${USE_TMUX}" ]
    then
      usetmux="ON"
    else
      usetmux="OFF"
    fi
    skip_it_so=
    PS3="${BOLD}${PLEASE} command choice (numeric or text): ${NORMAL}"
    options=()
    [ "${have_gnome}" ] && options+=("GNOME Music Player Plus")
    [ "${have_retro}" ] && options+=("Retro Music Player Plus")
    [ "${have_tilix}" ] && options+=("Tilix Music Player Plus")
    [ "${have_cantata}" ] && options+=("Cantata Music Player Plus")
    [ "${need_yams}" ] && options+=("Activate Last.fm Scrobbler Service")
    options+=("ASCIImatics Animations" "Convert WAV files to MP3")
    options+=("Download Album Cover Art" "Import Music to Beets")
    options+=("Extract Audio Information" "Fetch Lyrics")
    options+=("Manage MusicPlayerPlus Services")
    [ "${have_fzf}" ] && options+=("List/Search/Select Media")
    options+=("Toggle Use Tmux (${usetmux})")
    [ "${have_nema}" ] && options+=("Toggle Record Tmux Session (${recordstat})")
    options+=("Toggle Fullscreen (${fullstat})" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "GNOME Music Player Plus",*|*,"GNOME Music Player Plus")
              MPCPLUS="mpcplus"
              break
              ;;
          "Retro Music Player Plus",*|*,"Retro Music Player Plus")
              MPCPLUS="mpcplus"
              RETRO=1
              break
              ;;
          "Tilix Music Player Plus",*|*,"Tilix Music Player Plus")
              MPCPLUS="mpcplus"
              TILIX=1
              break
              ;;
          "Cantata Music Player Plus",*|*,"Cantata Music Player Plus")
              MPCPLUS="cantata"
              break
              ;;
          "ASCIImatics Animations",*|*,"ASCIImatics Animations")
              show_ascii_menu
              skip_it_so=1
              break
              ;;
          "Manage"*,*|*,"Manage"*)
              show_services_menu
              skip_it_so=1
              break
              ;;
          "List"*,*|*,"List"*)
              show_fzmp_menu
              skip_it_so=1
              break
              ;;
          "Convert"*,*|*,"Convert"*)
              CONVERT_WAV=1
              DO_NOT_EXIT=1
              break
              ;;
          "Activate"*,*|*,"Activate"*)
              ACT_YAMS=1
              DO_NOT_EXIT=1
              break
              ;;
          "Download"*,*|*,"Download"*)
              DOWNLOAD_ART=1
              DO_NOT_EXIT=1
              break
              ;;
          "Extract"*,*|*,"Extract"*)
              XTRACTOR="all"
              DO_NOT_EXIT=1
              break
              ;;
          "Fetch"*,*|*,"Fetch"*)
              FETCH_LYRICS=1
              DO_NOT_EXIT=1
              break
              ;;
          "Import"*,*|*,"Import"*)
              BEETS_IMPORT=1
              DO_NOT_EXIT=1
              break
              ;;
          "Toggle Use Tmux"*,*|*,"Toggle Use Tmux"*)
              if [ "${USE_TMUX}" ]
              then
                USE_TMUX=
                RECORD=
              else
                USE_TMUX=1
              fi
              skip_it_so=1
              break
              ;;
          "Toggle Record Tmux Session"*,*|*,"Toggle Record Tmux Session"*)
              if [ "${RECORD}" ]
              then
                RECORD=
              else
                RECORD=1
                USE_TMUX=1
              fi
              if [ "${RECORD}" ]
              then
                MPCPLUS_TMUX="${MPCPLUS_TMUX} -r"
              else
                MPCPLUS_TMUX=`echo ${MPCPLUS_TMUX} | sed -e "s/ -r//"`
              fi
              skip_it_so=1
              break
              ;;
          "Toggle Fullscreen"*,*|*,"Toggle Fullscreen"*)
              if [ "${FULLSCREEN}" ]
              then
                FULLSCREEN=
              else
                FULLSCREEN=1
              fi
              skip_it_so=1
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              printf "\nExiting\n"
              exit 0
              ;;
      esac
      REPLY=
    done
    [ "${skip_it_so}" ] || {
      make_it_so
      init_vars
    }
  done
}

init_vars() {
  MPCPLUS="mpcplus"
  if [ "${USE_GRAD}" ]
  then
    MPCPLUS_TMUX="mpcplus-tmux -f"
  else
    MPCPLUS_TMUX="mpcplus-tmux -f -g"
  fi
  MPPSPLASH="mppsplash"
  MPPSPLASH_TMUX="mppsplash-tmux"

  AUDIO=
  CLIENT=
  COVER_ART=
  CONVERT_WAV=
  DOWNLOAD_ART=
  ACT_YAMS=
  DIS_YAMS=
  FETCH_LYRICS=
  BEETS_IMPORT=
  XTRACTOR=
  FULLSCREEN=
  HALFHEIGHT=
  INTERACTIVE=
  FZMPOPT=
  MUSIC_DIRECTORY=
  QRTRHEIGHT=
  RECORD=
  RETRO=
  SPLASH=
  TILIX=
  TMUX_MPC=
  TMUX_SPLASH=
  USAGE=
}

init_vars
if [ "${DISPLAY}" ]
then
  status=0
  if [ -x ${SCRIPTS}/check_tty.sh ]
  then
    ${SCRIPTS}/check_tty.sh
    status=$?
  else
    have_tty=`type -p tty`
    [ "${have_tty}" ] && {
      tty=$(tty)
      echo "${tty}" | grep /dev/tty > /dev/null && status=1
      echo "${tty}" | grep /dev/con > /dev/null && status=1
    }
  fi
  [ ${status} -eq 0 ] || {
    CONSOLE_MODE=1
    TMUX_MPC=1
  }
else
  CONSOLE_MODE=1
  TMUX_MPC=1
fi

systemctl --user is-active --quiet yams.service
if [ $? -eq 0 ]
then
  need_yams=
else
  systemctl --user is-enabled --quiet yams.service
  if [ $? -eq 0 ]
  then
    need_yams=
  else
    need_yams=1
  fi
fi

have_uebz=`type -p ueberzug`
have_cantata=`type -p cantata`
have_fzf=`type -p fzf`
have_retro=`type -p cool-retro-term`
have_tilix=`type -p tilix`
have_nema=`type -p asciinema`
have_gnome=`type -p gnome-terminal`
writeflag=
tagflag=

while getopts "AabcC:Dd:FfghiIjJkLmM:n:NpP:qrRSs:tTv:wWX:yYz:u" flag; do
  case $flag in
    a)
      AUDIO=1
      MPPSPLASH="${MPPSPLASH} -a"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -a"
      tagflag="-a"
      ;;
    A)
      [ "${have_uebz}" ] && {
        [ "${CONSOLE_MODE}" ] || {
          COVER_ART=1
          TMUX_MPC=1
          MPCPLUS_TMUX="${MPCPLUS_TMUX} -a"
        }
      }
      tagflag="-A"
      ;;
    b)
      MPPSPLASH="${MPPSPLASH} -b"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -b"
      ;;
    c)
      CLIENT=1
      [ "${have_cantata}" ] || {
        echo "Option '-c' indicates use cantata MPD client."
        echo "However, cantata is not installed or not in your path."
        echo "You can install cantata using apt or dnf as follows:"
        printf "\n\n\tsudo apt install cantata\nor"
        printf "\n\tsudo dnf install cantata\n\n"
        echo "Continuing, using mpcplus rather than cantata."
        CLIENT=
      }
      [ "${CLIENT}" ] && MPCPLUS="cantata"
      ;;
    C)
      CLIENT="${OPTARG}"
      type -p "${CLIENT}" > /dev/null || {
        echo "Option '-C' indicates use ${CLIENT} MPD client."
        echo "However, ${CLIENT} is not installed or not in your path."
        echo "You may be able to install ${CLIENT} using apt or dnf as follows:"
        printf "\n\n\tsudo apt install ${CLIENT}\nor"
        printf "\n\tsudo dnf install ${CLIENT}\n\n"
        if [ "${have_cantata}" ]
        then
          echo "Continuing, using cantata rather than ${CLIENT}."
          CLIENT=cantata
        else
          echo "Continuing, using mpcplus rather than ${CLIENT}."
          CLIENT=
        fi
      }
      [ "${CLIENT}" ] && MPCPLUS="${CLIENT}"
      ;;
    D)
      DOWNLOAD_ART=1
      ;;
    d)
      MUSIC_DIRECTORY="${OPTARG}"
      ;;
    F)
      CONVERT_WAV=1
      ;;
    f)
      FULLSCREEN=1
      ;;
    g)
      USE_GRAD=
      ;;
    h)
      HALFHEIGHT=1
      ;;
    I)
      BEETS_IMPORT=1
      ;;
    i)
      INTERACTIVE=1
      ;;
    k)
      kill_tmux_sessions
      exit 0
      ;;
    j)
      MPPSPLASH="${MPPSPLASH} -j"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l julia"
      ;;
    J)
      MPPSPLASH="${MPPSPLASH} -J"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -J"
      ;;
    L)
      FETCH_LYRICS=1
      ;;
    m)
      MPPSPLASH="${MPPSPLASH} -m"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l rocks"
      ;;
    M)
      mpp_service ${OPTARG} mpd
      echo "Exiting"
      exit 0
      ;;
    n)
      MPPSPLASH="${MPPSPLASH} -c ${OPTARG}"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -c ${OPTARG}"
      ;;
    N)
      MPPSPLASH="${MPPSPLASH} -C"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -t"
      ;;
    p)
      MPPSPLASH="${MPPSPLASH} -p"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l plasma"
      ;;
    P)
      MPCPLUS_TMUX="${MPCPLUS_TMUX} -p ${OPTARG}"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l ${OPTARG}"
      ;;
    q)
      QRTRHEIGHT=1
      ;;
    r)
      [ "${have_retro}" ] || {
        echo "Option '-r' indicates use cool-retro-term terminal emulator."
        echo "However, cool-retro-term is not installed or not in your path."
        echo "You can install cool-retro-term using apt or dnf as follows:"
        printf "\n\n\tsudo apt install cool-retro-term\nor"
        printf "\n\tsudo dnf install cool-retro-term\n\n"
        echo "Exiting"
        exit 1
      }
      RETRO=1
      [ "${have_tilix}" ] && TILIX=1
      ;;
    R)
      [ "${have_nema}" ] && {
        RECORD=1
        USE_TMUX=1
        MPCPLUS_TMUX="${MPCPLUS_TMUX} -r"
        MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -R"
      }
      ;;
    S)
      SPLASH=1
      ;;
    s)
      MPPSPLASH="${MPPSPLASH} -s ${OPTARG}"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -s ${OPTARG}"
      ;;
    t)
      [ "${have_tilix}" ] || {
        echo "Option '-t' indicates use tilix terminal emulator."
        echo "However, tilix is not installed or not in your path."
        echo "You can install tilix using apt or dnf as follows:"
        printf "\n\n\tsudo apt install tilix\nor"
        printf "\n\tsudo dnf install tilix\n\n"
        echo "Exiting"
        exit 1
      }
      TILIX=1
      ;;
    T)
      USE_TMUX=1
      ;;
    v)
      viz_com=`echo "${OPTARG}" | awk ' { print $1 } '`
      have_viz=`type -p ${viz_com}`
      if [ "${have_viz}" ]
      then
        VISUALIZER="${OPTARG}"
      else
        echo "Specified visualizer ${OPTARG} not found."
        echo "Using ${VISUALIZER} visualizer"
      fi
      ;;
    w)
      writeflag="-w"
      ;;
    W)
      writeflag="-W"
      ;;
    X)
      XTRACTOR="${OPTARG}"
      ;;
    y)
      DIS_YAMS=1
      ;;
    Y)
      ACT_YAMS=1
      ;;
    z)
      FZMPOPT="${OPTARG}"
      ;;
    u)
      USAGE=1
      ;;
    esac
done

impflags="${tagflag} ${writeflag}"

# The -T option says use tmux, -S says do asciimatics
# If we have both then do asciimatics in tmux
# If just the -T then do mpcplus in tmux
[ "${USE_TMUX}" ] && {
  if [ "${SPLASH}" ]
  then
    TMUX_SPLASH=1
  else
    TMUX_MPC=1
  fi
}

[ "${TILIX}" ] || {
  [ "${RETRO}" ] || {
    [ "${have_gnome}" ] || {
      echo "No option '-t' or '-r' indicates use gnome-terminal"
      echo "terminal emulator. However, gnome-terminal is either"
      echo "not installed or not in your path."
      echo "You can install gnome-terminal using apt or dnf as follows:"
      printf "\n\n\tsudo apt install gnome-terminal\nor"
      printf "\n\tsudo dnf install gnome-terminal\n\n"
      [ "${have_tilix}" ] || usage
      echo "Alternately, invoke mpplus with the '-t' option to use tilix."
      echo "Continuing with tilix as the terminal emulator."
      TILIX=1
    }
  }
  [ "${TILIX}" ] || {
    [ "${have_gnome}" ] || {
      echo "No option '-t' indicates use gnome-terminal terminal emulator."
      echo "However, gnome-terminal is not installed or not in your path."
      echo "You can install gnome-terminal using apt or dnf as follows:"
      printf "\n\n\tsudo apt install gnome-terminal\nor"
      printf "\n\tsudo dnf install gnome-terminal\n\n"
      [ "${have_tilix}" ] || usage
      echo "Alternately, invoke mpplus with the '-t' option to use tilix."
      echo "Continuing with tilix as the terminal emulator."
      TILIX=1
    }
  }
}

[ "${HALFHEIGHT}" ] && [ "${QRTRHEIGHT}" ] && {
  [ "${FULLSCREEN}" ] && {
    echo "Only one of '-h' and '-q' should be specified"
    echo "Quarter-height overrides half-height. Using quarter-height."
    HALFHEIGHT=
  }
}
[ "${HALFHEIGHT}" ] && {
  [ "${FULLSCREEN}" ] || {
    echo "Height settings only apply when in fullscreen mode."
    echo "Ignoring '-h' half-height option."
    HALFHEIGHT=
  }
}
[ "${QRTRHEIGHT}" ] && {
  [ "${FULLSCREEN}" ] || {
    echo "Height settings only apply when in fullscreen mode."
    echo "Ignoring '-q' quarter-height option."
    QRTRHEIGHT=
  }
}

[ "${USAGE}" ] && usage

if [ "${INTERACTIVE}" ]
then
  show_main_menu
else
  if [ "${FZMPOPT}" ]
  then
    fzmp -${FZMPOPT}
  else
    make_it_so
  fi
fi
