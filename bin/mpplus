#!/bin/bash
#
# mpplus - Run mpcplus and visualizer in separate terminal emulators,
#          cantata and mppcava in separate windows, or a specified
#          MPD client and visualizer in separate windows. Alternately,
#          Run an ASCIImatics animation optionally accompanied
#          by specified audio.
#
#          Can also download album cover art or kill tmux sessions.
#
# Written by Ronald Joe Record <ronaldrecord@gmail.com>
# March, 2022
#
# I am using two separate terminal emulators as I want a smaller
# font for the visualizer terminal. The terminal command options are
# customized for my setup, you may need to adjust the geometry
# to get the two windows to align as desired. I wanted the visualizer
# terminal window at the bottom of the screen and aligned with
# the mpcplus terminal window.
#
# If the "-t" option is specified then only a single terminal
# emulator is used, tilix. Tilix is invoked twice with different
# profiles, one for mpcplus and another for the visualizer.
# The profiles are named "MusicPlayer" and "Visualizer". 
#
# In both types of invocations, with or without "-t", the terminal
# profiles used have font sizee settings of 32 and 8 for mpcplus and
# visualizer, respectively. This aligns the windows, on my system, when
# not in fullscreen mode.
#
# When using the cool-retro-term for mpcplus (-r option), adjust the
# size of the cool-retro-term window manually so it aligns with the
# visualizer window. I could not figure out how to specify a geometry
# for the cool-retro-term window when invoked with "-e mpcplus".
#
# Note also that the key bindings I have configured for mpcplus
# to dynamically set the transparency of the terminal window only
# work when using xfce4-terminal for mpcplus.
#
# Cantata can be used as the MPD client, replacing the invocation of a
# terminal emulator running mpcplus with direct invocation of cantata.
# In addition, an alternate MPD client can be specified on the command line.

BOLD=$(tput bold)
NORMAL=$(tput sgr0)
PLEASE="Please enter your"
VTITLE="Spectrum Visualizer"
MTITLE="Music Player Plus"
VISUALIZER=mppcava
CONSOLE_MODE=
DO_NOT_EXIT=
USE_GRAD=1
MPP_DIR="/usr/share/musicplayerplus"
SCRIPTS="${MPP_DIR}/scripts"

usage() {
  printf "\nUsage: mpplus [-A] [-a] [-b] [-c] [-C client] [-D] [-d music_directory]"
  printf "\n\t\t[-g] [-f] [-h] [-I] [-i] [-jJ] [-k] [-m]"
  printf "\n\t\t[-M alsaconf|enable|disable|restart|start|stop|status]"
  printf "\n\t\t[-n num] [-N] [-p] [-P script] [-q] [-r] [-R] [-s song]"
  printf "\n\t\t[-S] [-t] [-T] [-u] [-v viz_comm] [-z fzmpopt]"
  printf "\nMPCplus/Visualizer options:"
  printf "\n\t-A indicates display album cover art (implies tmux session)"
  printf "\n\t-c indicates use cantata MPD client rather than mpcplus"
  printf "\n\t-C 'client' indicates use 'client' MPD client rather than mpcplus"
  printf "\n\t-f indicates fullscreen display"
  printf "\n\t-g indicates do not use gradient colors for spectrum visualizer"
  printf "\n\t-h indicates half-height for visualizer window (with -f only)"
  printf "\n\t-P script specifies the ASCIImatics script to run in visualizer pane"
  printf "\n\t-q indicates quarter-height for visualizer window (with -f only)"
  printf "\n\t-r indicates use retro terminal emulator"
  printf "\n\t-t indicates use tilix terminal emulator"
  printf "\n\t-v 'viz_comm' indicates use visualizer 'viz_comm' rather than mppcava"
  printf "\nASCIImatics animation options:"
  printf "\n\t-a indicates play audio during ASCIImatics display"
  printf "\n\t-b indicates use backup audio during ASCIImatics display"
  printf "\n\t-j indicates use Julia Set scenes in ASCIImatics display"
  printf "\n\t-J indicates Julia Set with several runs using different parameters"
  printf "\n\t-m indicates use MusicPlayerPlus scenes in ASCIImatics display"
  printf "\n\t-n num specifies the number of times to cycle ASCIImatics scenes"
  printf "\n\t-N indicates use alternate comments in Plasma ASCIImatics scenes"
  printf "\n\t-p indicates use Plasma scenes in ASCIImatics display"
  printf "\n\t-s song specifies a song to accompany an ASCIImatics animation"
  printf "\n\t\t'song' can be the full pathname to an audio file or a"
  printf "\n\t\trelative pathname to an audio file in the MPD music library"
  printf "\n\t\tor $HOME/Music/"
  printf "\n\t-S indicates display ASCIImatics splash animation"
  printf "\nGeneral options:"
  printf "\n\t-D indicates download album cover art and exit"
  printf "\n\t-d 'music_directory' specifies the music directory to use for"
  printf "\n\t\tdownloaded album cover art (without this option -D will use"
  printf "\n\t\tthe 'music_directory' setting in '~/.config/mpd/mpd.conf'"
  printf "\n\t-I indicates import albums and songs from 'music_directory' to beets and exit"
  printf "\n\t-i indicates start mpplus in interactive mode"
  printf "\n\t-k indicates kill MusicPlayerPlus tmux sessions and ASCIImatics scripts"
  printf "\n\t-M 'action' can be used to control the Music Player Daemon (MPD)"
  printf "\n\t    or configure the ALSA sound system"
  printf "\n\t\tALSA configuration will update the ALSA configuration in '/etc/asound.conf'"
  printf "\n\t-R indicates record tmux session with asciinema"
  printf "\n\t-T indicates use a tmux session for either ASCIImatics or mpcplus"
  printf "\n\t-z fzmpopt specifies the fzmp option and invokes fzmp to"
  printf "\n\t\tlist/search/select media in the MPD library."
  printf "\n\t\tValid values for fzmpopt are 'a', 'A', 'g', 'p', or 'P'"
  printf "\n\t-u displays this usage message and exits\n"
  printf "\nType 'man mpplus' for detailed usage info on mpplus"
  printf "\nType 'man mpcplus' for detailed usage info on the mpcplus MPD client"
  printf "\nType 'man mppsplash' for detailed usage info on the mppsplash command\n"
  exit 1
}

kill_tmux_sessions() {
  SESSIONS="musicplayerplus mppsplash"
  for session in ${SESSIONS}
  do
    ps -ef | grep tmux | grep ${session} > /dev/null && {
      tmux kill-session -t ${session}
    }
  done
  ASCIIS="mppjulia mpprocks mppplasma"
  for ascii in ${ASCIIS}
  do
    ps -ef | grep -v grep | grep ${ascii} > /dev/null && {
      ps -ef | grep -v grep | grep ${ascii} | while IFS= read -r line
      do
        pid=`echo "$line" | awk ' { print $2 } '`
        kill ${pid}
      done 
    }
  done
}

make_it_so() {
  [ "${DOWNLOAD_ART}" ] && {
    if [ -x ${SCRIPTS}/download_cover_art.sh ]
    then
      if [ "${MUSIC_DIRECTORY}" ]
      then
        nohup ${SCRIPTS}/download_cover_art.sh -d "${MUSIC_DIRECTORY}" > /dev/null 2>&1 &
      else
        nohup ${SCRIPTS}/download_cover_art.sh > /dev/null 2>&1 &
      fi
    else
      echo "${SCRIPTS}/download_cover_art.sh not found or not executable"
      echo "Check your MusicPlayerPlus installation"
      echo ""
      echo "Manual cover art download may be required:"
      printf "\n\tsacad_r <MUSIC_DIRECTORY> 600 cover.jpg"
      printf "\nWhere <MUSIC_DIRECTORY> is the full pathname to your music library\n"
    fi
    [ "${DO_NOT_EXIT}" ] || exit 0
  }

  [ "${BEETS_IMPORT}" ] && {
    if [ -x ${SCRIPTS}/beet_import.sh ]
    then
      if [ "${MUSIC_DIRECTORY}" ]
      then
        nohup ${SCRIPTS}/beet_import.sh -d "${MUSIC_DIRECTORY}" > /dev/null 2>&1 &
      else
        nohup ${SCRIPTS}/beet_import.sh > /dev/null 2>&1 &
      fi
    else
      echo "${SCRIPTS}/beet_import.sh not found or not executable"
      echo "Check your MusicPlayerPlus installation"
      echo ""
      echo "Manual beets import may be required:"
      printf "\n\tbeet import -W <MUSIC_DIRECTORY>"
      printf "\n\tbeet import -Wps <MUSIC_DIRECTORY>"
      printf "\nWhere <MUSIC_DIRECTORY> is the full pathname to your music library\n"
    fi
    [ "${DO_NOT_EXIT}" ] || exit 0
  }

  # Begin visualizer startup section
  #
  # Do not start visualizer here if we are going to start a tmux session
  # or if we are displaying an asciimatics animation
  [ "${TMUX_MPC}" ] || [ "${SPLASH}" ] || {
    if [ "${FULLSCREEN}" ]
    then
      if [ "${TILIX}" ]
      then
        tilix --title="${VTITLE}" \
              --full-screen \
              --window-style=borderless \
              --profile=Visualizer \
              --command="${VISUALIZER}" 2> /dev/null &
      else
        gnome-terminal --title="${VTITLE}" \
              --profile=Visualizer \
              --hide-menubar \
              --full-screen \
              -- ${VISUALIZER} &
      fi
      [ "${HALFHEIGHT}" ] || [ "${QRTRHEIGHT}" ] && {
        sleep 1
        if [ "${TILIX}" ]
        then
          viz_win=`wmctrl -l -G -x | grep tilix.Tilix | grep "${VTITLE}"`
        else
          viz_win=`wmctrl -l -G -x | grep gnome-terminal-server | grep "${VTITLE}"`
        fi
        [ "${viz_win}" ] || {
          if [ "${TILIX}" ]
          then
            viz_win=`wmctrl -l -G -x | grep tilix.Tilix | grep "${VISUALIZER}"`
            [ "${viz_win}" ] || echo "Could not find visualizer window"
          else
            viz_win=`wmctrl -l -G -x | grep gnome-terminal-server | grep "${VISUALIZER}"`
            [ "${viz_win}" ] || echo "Could not find visualizer window"
          fi
        }
        [ "${viz_win}" ] && {
          winid=`echo ${viz_win} | awk ' { print $1 } '`
          grav=`echo ${viz_win} | awk ' { print $2 } '`
          xoff=`echo ${viz_win} | awk ' { print $3 } '`
          yoff=`echo ${viz_win} | awk ' { print $4 } '`
          width=`echo ${viz_win} | awk ' { print $5 } '`
          height=`echo ${viz_win} | awk ' { print $6 } '`
          [ "${winid}" ] && {
            if [ "${HALFHEIGHT}" ]
            then
              height=$((height / 2))
            else
              height=$((height / 4))
              # Fudge this to compensate for differing window decoration size
              [ "${TILIX}" ] || height=$((height - 30))
            fi
            mvarg="${grav},${xoff},${yoff},${width},${height}"
            wmctrl -i -r "${winid}" -b "remove,fullscreen,maximized_vert"
            wmctrl -i -r "${winid}" -e "${mvarg}"
          }
        }
      }
    else
      if [ "${TILIX}" ]
      then
        tilix --title="${VTITLE}" \
              --window-style=borderless \
              --geometry=390x16+150-0 \
              --profile=Visualizer \
              --command="${VISUALIZER}" 2> /dev/null &
      else
        gnome-terminal --title="${VTITLE}" \
              --profile=Visualizer \
              --hide-menubar \
              --geometry 390x16+150-0 \
              -- ${VISUALIZER} &
      fi
    fi
    sleep 1
  }
  # End visualizer startup section

  # Fullscreen tmux sessions and ASCIImatics Animations
  [ "${SPLASH}" ] || [ "${TMUX_MPC}" ] && FULLSCREEN=1

  # Set the command to use based on command line switches (-S, -T)
  MPCOMM="${MPCPLUS}"
  if [ "${SPLASH}" ]
  then
    if [ "${TMUX_SPLASH}" ]
    then
      MPCOMM="${MPPSPLASH_TMUX}"
    else
      MPCOMM="${MPPSPLASH}"
    fi
  else
    [ "${TMUX_MPC}" ] && MPCOMM="${MPCPLUS_TMUX}"
  fi

  # Begin MPD client startup section
  if [ "${CONSOLE_MODE}" ] || [ "${TMUX_MPC}" ]
  then
    ${MPCOMM}
  else
    if [ "${RETRO}" ]
    then
      if [ "${FULLSCREEN}" ]
      then
        cool-retro-term --fullscreen -e "${MPCOMM}" 2> /dev/null
      else
        cool-retro-term -e "${MPCOMM}" 2> /dev/null
      fi
    else
      if [ "${FULLSCREEN}" ]
      then
        if [ "${TILIX}" ]
        then
          tilix --title="${MTITLE}" \
                --full-screen \
                --window-style=borderless \
                --profile=MusicPlayer \
                --command="${MPCOMM}" 2> /dev/null
        else
          gnome-terminal --title="${MTITLE}" \
                --profile=MusicPlayer \
                --hide-menubar \
                --full-screen \
                -- ${MPCOMM}
        fi
      else
        if [ "${TILIX}" ]
        then
          tilix --title="${MTITLE}" \
                --window-style=borderless \
                --geometry=90x20+150+25 \
                --profile=MusicPlayer \
                --command="${MPCOMM}" 2> /dev/null
        else
          gnome-terminal --title="${MTITLE}" \
                --profile=MusicPlayer \
                --hide-menubar \
                --geometry=90x20+150+25 \
                -- ${MPCOMM}
        fi
      fi
    fi
  fi
  # End MPD client startup section
}

mpd_services() {
  MPD_SERVICE_ACTION=$1
  case ${MPD_SERVICE_ACTION} in
    alsaconf)
      echo "Executing: sudo alsa_conf -e -m"
      sudo alsa_conf -e -m
      ;;
    start|stop|disable|enable|restart)
      echo "Executing: systemctl --user ${MPD_SERVICE_ACTION} mpd.service"
      systemctl --user ${MPD_SERVICE_ACTION} mpd.service
      ;;
    status)
      echo "Executing: systemctl --user --full ${MPD_SERVICE_ACTION} mpd.service"
      systemctl --user --full ${MPD_SERVICE_ACTION} mpd.service
      ;;
    *)
      echo "Unrecognized MPD service action: ${MPD_SERVICE_ACTION}"
      ;;
  esac
}

show_services_menu() {
  while true
  do
    systemctl --user is-active mpd.service >/dev/null 2>&1 && m_active="active" || m_active="inactive"
    systemctl --user is-enabled mpd.service >/dev/null 2>&1 && m_enabled="enabled" || m_enabled="disabled"
    printf "\nCurrent status of Music Player Service:"
    printf "\n\tMusic Player Service is ${m_enabled} and ${m_active}\n\n"
    PS3="${BOLD}${PLEASE} command choice (numeric or text): ${NORMAL}"
    options=("Configure ALSA Sound System" "Enable Music Player Services" "Disable Music Player Services" "Start Music Player Services" "Stop Music Player Services" "Restart Music Player Services" "Get Status of Music Player Services")
    options+=("Main menu" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "Main menu",*|*,"Main menu"|"Back",*|*,"Back"|"back",*|*,"back")
              printf "Returning\n\n"
              init_vars
              break 2
              ;;
          "Configure ALSA Sound System",*|*,"Configure ALSA Sound System")
              mpd_services alsaconf
              break
              ;;
          "Enable Music Player Services",*|*,"Enable Music Player Services")
              mpd_services enable
              break
              ;;
          "Disable Music Player Services",*|*,"Disable Music Player Services")
              mpd_services disable
              break
              ;;
          "Start Music Player Services",*|*,"Start Music Player Services")
              mpd_services start
              break
              ;;
          "Stop Music Player Services",*|*,"Stop Music Player Services")
              mpd_services stop
              break
              ;;
          "Restart Music Player Services",*|*,"Restart Music Player Services")
              mpd_services restart
              break
              ;;
          "Get Status of Music Player Services",*|*,"Get Status of Music Player Services")
              mpd_services status
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              printf "\nExiting\n"
              exit 0
              ;;
      esac
      REPLY=
    done
  done
  init_vars
}

show_fzmp_menu() {
  while true
  do
    PS3="${BOLD}${PLEASE} command choice (numeric or text): ${NORMAL}"
    options=("Search artist filtered by album")
    options+=("Search all songs in library")
    options+=("List genres in library")
    options+=("Search current playlist")
    options+=("List saved playlists")
    options+=("Main menu" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "Main menu",*|*,"Main menu"|"Back",*|*,"Back"|"back",*|*,"back")
              printf "Returning\n\n"
              init_vars
              break 2
              ;;
          "Search artist"*,*|*,"Search artist"*)
              fzmp -a
              break
              ;;
          "Search all"*,*|*,"Search all"*)
              fzmp -A
              break
              ;;
          "List genre"*,*|*,"List genre"*)
              fzmp -g
              break
              ;;
          "Search current"*,*|*,"Search current"*)
              fzmp -p
              break
              ;;
          "List saved"*,*|*,"List saved"*)
              fzmp -P
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              printf "\nExiting\n"
              exit 0
              ;;
      esac
    done
  done
}

show_ascii_menu() {
  while true
  do
    SPLASH=1
    if [ "${COVER_ART}" ]
    then
      coverstat="ON"
    else
      coverstat="OFF"
    fi
    if [ "${AUDIO}" ]
    then
      audiostat="ON"
    else
      audiostat="OFF"
    fi
    if [ "${RECORD}" ]
    then
      recordstat="ON"
    else
      recordstat="OFF"
    fi
    if [ "${USE_TMUX}" ]
    then
      usetmux="ON"
    else
      usetmux="OFF"
    fi
    skip_it_so=
    PS3="${BOLD}${PLEASE} command choice (numeric or text): ${NORMAL}"
    options=("Julia Set ASCIImatics Animation" "MPPlus ASCIImatics Animation" "Plasma ASCIImatics Animation" "Toggle Audio (${audiostat})")
    [ "${have_uebz}" ] && options+=("Toggle Show Cover Art (${coverstat})")
    [ "${have_nema}" ] && options+=("Toggle Record Tmux Session (${recordstat})")
    options+=("Toggle Use Tmux (${usetmux})" "Main menu" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "Main menu",*|*,"Main menu"|"Back",*|*,"Back"|"back",*|*,"back")
              printf "Returning\n\n"
              init_vars
              break 2
              ;;
          "Julia Set ASCIImatics Animation",*|*,"Julia Set ASCIImatics Animation")
              MPPSPLASH="${MPPSPLASH} -j"
              MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l julia"
              break
              ;;
          "MPPlus ASCIImatics Animation",*|*,"MPPlus ASCIImatics Animation")
              MPPSPLASH="${MPPSPLASH} -m"
              MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l rocks"
              break
              ;;
          "Plasma ASCIImatics Animation",*|*,"Plasma ASCIImatics Animation")
              MPPSPLASH="${MPPSPLASH} -p"
              MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l plasma"
              break
              ;;
          "Toggle Show Cover Art"*,*|*,"Toggle Show Cover Art"*)
              if [ "${COVER_ART}" ]
              then
                COVER_ART=
              else
                COVER_ART=1
              fi
              if [ "${COVER_ART}" ]
              then
                TMUX_MPC=1
                MPCPLUS_TMUX="${MPCPLUS_TMUX} -a"
              else
                TMUX_MPC=
                MPCPLUS_TMUX=`echo ${MPCPLUS_TMUX} | sed -e "s/ -a//"`
              fi
              skip_it_so=1
              break
              ;;
          "Toggle Audio"*,*|*,"Toggle Audio"*)
              if [ "${AUDIO}" ]
              then
                AUDIO=
              else
                AUDIO=1
              fi
              if [ "${AUDIO}" ]
              then
                MPPSPLASH="${MPPSPLASH} -a"
                MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -a"
              else
                MPPSPLASH=`echo ${MPPSPLASH} | sed -e "s/ -a//"`
                MPPSPLASH_TMUX=`echo ${MPPSPLASH_TMUX} | sed -e "s/ -a//"`
              fi
              skip_it_so=1
              break
              ;;
          "Toggle Record Tmux Session"*,*|*,"Toggle Record Tmux Session"*)
              if [ "${RECORD}" ]
              then
                RECORD=
              else
                RECORD=1
                USE_TMUX=1
              fi
              if [ "${RECORD}" ]
              then
                MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -R"
              else
                MPPSPLASH_TMUX=`echo ${MPPSPLASH_TMUX} | sed -e "s/ -R//"`
              fi
              skip_it_so=1
              break
              ;;
          "Toggle Use Tmux"*,*|*,"Toggle Use Tmux"*)
              if [ "${USE_TMUX}" ]
              then
                USE_TMUX=
                RECORD=
              else
                USE_TMUX=1
              fi
              skip_it_so=1
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              printf "\nExiting\n"
              exit 0
              ;;
      esac
      REPLY=
    done
    [ "${skip_it_so}" ] || {
      make_it_so
      init_vars
    }
  done
  init_vars
}

show_main_menu() {
  while true
  do
    if [ "${FULLSCREEN}" ]
    then
      fullstat="ON"
    else
      fullstat="OFF"
    fi
    if [ "${RECORD}" ]
    then
      recordstat="ON"
    else
      recordstat="OFF"
    fi
    if [ "${USE_TMUX}" ]
    then
      usetmux="ON"
    else
      usetmux="OFF"
    fi
    skip_it_so=
    PS3="${BOLD}${PLEASE} command choice (numeric or text): ${NORMAL}"
    options=()
    [ "${have_gnome}" ] && options+=("GNOME Music Player Plus")
    [ "${have_retro}" ] && options+=("Retro Music Player Plus")
    [ "${have_tilix}" ] && options+=("Tilix Music Player Plus")
    [ "${have_cantata}" ] && options+=("Cantata Music Player Plus")
    options+=("ASCIImatics Animations" "Download Album Cover Art" "Import Music to Beets")
    options+=("Manage Music Player Services")
    [ "${have_fzf}" ] && options+=("List/Search/Select Media")
    options+=("Toggle Use Tmux (${usetmux})")
    [ "${have_nema}" ] && options+=("Toggle Record Tmux Session (${recordstat})")
    options+=("Toggle Fullscreen (${fullstat})" "Quit")
    select opt in "${options[@]}"
    do
      case "$opt,$REPLY" in
          "GNOME Music Player Plus",*|*,"GNOME Music Player Plus")
              MPCPLUS="mpcplus"
              break
              ;;
          "Retro Music Player Plus",*|*,"Retro Music Player Plus")
              MPCPLUS="mpcplus"
              RETRO=1
              break
              ;;
          "Tilix Music Player Plus",*|*,"Tilix Music Player Plus")
              MPCPLUS="mpcplus"
              TILIX=1
              break
              ;;
          "Cantata Music Player Plus",*|*,"Cantata Music Player Plus")
              MPCPLUS="cantata"
              break
              ;;
          "ASCIImatics Animations",*|*,"ASCIImatics Animations")
              show_ascii_menu
              skip_it_so=1
              break
              ;;
          "Manage Music Player Services",*|*,"Manage Music Player Services")
              show_services_menu
              skip_it_so=1
              break
              ;;
          "List"*,*|*,"List"*)
              show_fzmp_menu
              skip_it_so=1
              break
              ;;
          "Download"*,*|*,"Download"*)
              DOWNLOAD_ART=1
              DO_NOT_EXIT=1
              break
              ;;
          "Import"*,*|*,"Import"*)
              BEETS_IMPORT=1
              DO_NOT_EXIT=1
              break
              ;;
          "Toggle Use Tmux"*,*|*,"Toggle Use Tmux"*)
              if [ "${USE_TMUX}" ]
              then
                USE_TMUX=
                RECORD=
              else
                USE_TMUX=1
              fi
              skip_it_so=1
              break
              ;;
          "Toggle Record Tmux Session"*,*|*,"Toggle Record Tmux Session"*)
              if [ "${RECORD}" ]
              then
                RECORD=
              else
                RECORD=1
                USE_TMUX=1
              fi
              if [ "${RECORD}" ]
              then
                MPCPLUS_TMUX="${MPCPLUS_TMUX} -r"
              else
                MPCPLUS_TMUX=`echo ${MPCPLUS_TMUX} | sed -e "s/ -r//"`
              fi
              skip_it_so=1
              break
              ;;
          "Toggle Fullscreen"*,*|*,"Toggle Fullscreen"*)
              if [ "${FULLSCREEN}" ]
              then
                FULLSCREEN=
              else
                FULLSCREEN=1
              fi
              skip_it_so=1
              break
              ;;
          "Quit",*|*,"Quit"|"quit",*|*,"quit")
              printf "\nExiting\n"
              exit 0
              ;;
      esac
      REPLY=
    done
    [ "${skip_it_so}" ] || {
      make_it_so
      init_vars
    }
  done
}

init_vars() {
  MPCPLUS="mpcplus"
  if [ "${USE_GRAD}" ]
  then
    MPCPLUS_TMUX="mpcplus-tmux -f"
  else
    MPCPLUS_TMUX="mpcplus-tmux -f -g"
  fi
  MPPSPLASH="mppsplash"
  MPPSPLASH_TMUX="mppsplash-tmux"

  AUDIO=
  CLIENT=
  COVER_ART=
  DOWNLOAD_ART=
  BEETS_IMPORT=
  FULLSCREEN=
  HALFHEIGHT=
  INTERACTIVE=
  FZMPOPT=
  MUSIC_DIRECTORY=
  QRTRHEIGHT=
  RECORD=
  RETRO=
  SPLASH=
  TILIX=
  TMUX_MPC=
  TMUX_SPLASH=
  USAGE=
}

init_vars
if [ "${DISPLAY}" ]
then
  status=0
  if [ -x ${SCRIPTS}/check_tty.sh ]
  then
    ${SCRIPTS}/check_tty.sh
    status=$?
  else
    have_tty=`type -p tty`
    [ "${have_tty}" ] && {
      tty=$(tty)
      echo "${tty}" | grep /dev/tty > /dev/null && status=1
      echo "${tty}" | grep /dev/con > /dev/null && status=1
    }
  fi
  [ ${status} -eq 0 ] || {
    CONSOLE_MODE=1
    TMUX_MPC=1
  }
else
  CONSOLE_MODE=1
  TMUX_MPC=1
fi
have_uebz=`type -p ueberzug`
have_cantata=`type -p cantata`
have_fzf=`type -p fzf`
have_retro=`type -p cool-retro-term`
have_tilix=`type -p tilix`
have_nema=`type -p asciinema`
have_gnome=`type -p gnome-terminal`

while getopts "AabcC:Dd:fghiIjJkmM:n:NpP:qrRSs:tTv:z:u" flag; do
  case $flag in
    a)
      AUDIO=1
      MPPSPLASH="${MPPSPLASH} -a"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -a"
      ;;
    A)
      [ "${have_uebz}" ] && {
        [ "${CONSOLE_MODE}" ] || {
          COVER_ART=1
          TMUX_MPC=1
          MPCPLUS_TMUX="${MPCPLUS_TMUX} -a"
        }
      }
      ;;
    b)
      MPPSPLASH="${MPPSPLASH} -b"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -b"
      ;;
    c)
      CLIENT=1
      [ "${have_cantata}" ] || {
        echo "Option '-c' indicates use cantata MPD client."
        echo "However, cantata is not installed or not in your path."
        echo "You can install cantata using apt or dnf as follows:"
        printf "\n\n\tsudo apt install cantata\nor"
        printf "\n\tsudo dnf install cantata\n\n"
        echo "Continuing, using mpcplus rather than cantata."
        CLIENT=
      }
      [ "${CLIENT}" ] && MPCPLUS="cantata"
      ;;
    C)
      CLIENT="${OPTARG}"
      type -p "${CLIENT}" > /dev/null || {
        echo "Option '-C' indicates use ${CLIENT} MPD client."
        echo "However, ${CLIENT} is not installed or not in your path."
        echo "You may be able to install ${CLIENT} using apt or dnf as follows:"
        printf "\n\n\tsudo apt install ${CLIENT}\nor"
        printf "\n\tsudo dnf install ${CLIENT}\n\n"
        if [ "${have_cantata}" ]
        then
          echo "Continuing, using cantata rather than ${CLIENT}."
          CLIENT=cantata
        else
          echo "Continuing, using mpcplus rather than ${CLIENT}."
          CLIENT=
        fi
      }
      [ "${CLIENT}" ] && MPCPLUS="${CLIENT}"
      ;;
    D)
      DOWNLOAD_ART=1
      ;;
    d)
      MUSIC_DIRECTORY="${OPTARG}"
      ;;
    f)
      FULLSCREEN=1
      ;;
    g)
      USE_GRAD=
      ;;
    h)
      HALFHEIGHT=1
      ;;
    I)
      BEETS_IMPORT=1
      ;;
    i)
      INTERACTIVE=1
      ;;
    k)
      kill_tmux_sessions
      exit 0
      ;;
    j)
      MPPSPLASH="${MPPSPLASH} -j"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l julia"
      ;;
    J)
      MPPSPLASH="${MPPSPLASH} -J"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -J"
      ;;
    m)
      MPPSPLASH="${MPPSPLASH} -m"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l rocks"
      ;;
    M)
      mpd_services ${OPTARG}
      echo "Exiting"
      exit 0
      ;;
    n)
      MPPSPLASH="${MPPSPLASH} -c ${OPTARG}"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -c ${OPTARG}"
      ;;
    N)
      MPPSPLASH="${MPPSPLASH} -C"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -t"
      ;;
    p)
      MPPSPLASH="${MPPSPLASH} -p"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l plasma"
      ;;
    P)
      MPCPLUS_TMUX="${MPCPLUS_TMUX} -p ${OPTARG}"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -l ${OPTARG}"
      ;;
    q)
      QRTRHEIGHT=1
      ;;
    r)
      [ "${have_retro}" ] || {
        echo "Option '-r' indicates use cool-retro-term terminal emulator."
        echo "However, cool-retro-term is not installed or not in your path."
        echo "You can install cool-retro-term using apt or dnf as follows:"
        printf "\n\n\tsudo apt install cool-retro-term\nor"
        printf "\n\tsudo dnf install cool-retro-term\n\n"
        echo "Exiting"
        exit 1
      }
      RETRO=1
      [ "${have_tilix}" ] && TILIX=1
      ;;
    R)
      [ "${have_nema}" ] && {
        RECORD=1
        USE_TMUX=1
        MPCPLUS_TMUX="${MPCPLUS_TMUX} -r"
        MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -R"
      }
      ;;
    S)
      SPLASH=1
      ;;
    s)
      MPPSPLASH="${MPPSPLASH} -s ${OPTARG}"
      MPPSPLASH_TMUX="${MPPSPLASH_TMUX} -s ${OPTARG}"
      ;;
    t)
      [ "${have_tilix}" ] || {
        echo "Option '-t' indicates use tilix terminal emulator."
        echo "However, tilix is not installed or not in your path."
        echo "You can install tilix using apt or dnf as follows:"
        printf "\n\n\tsudo apt install tilix\nor"
        printf "\n\tsudo dnf install tilix\n\n"
        echo "Exiting"
        exit 1
      }
      TILIX=1
      ;;
    T)
      USE_TMUX=1
      ;;
    v)
      viz_com=`echo "${OPTARG}" | awk ' { print $1 } '`
      have_viz=`type -p ${viz_com}`
      if [ "${have_viz}" ]
      then
        VISUALIZER="${OPTARG}"
      else
        echo "Specified visualizer ${OPTARG} not found."
        echo "Using ${VISUALIZER} visualizer"
      fi
      ;;
    z)
      FZMPOPT="${OPTARG}"
      ;;
    u)
      USAGE=1
      ;;
    esac
done

# The -T option says use tmux, -S says do asciimatics
# If we have both then do asciimatics in tmux
# If just the -T then do mpcplus in tmux
[ "${USE_TMUX}" ] && {
  if [ "${SPLASH}" ]
  then
    TMUX_SPLASH=1
  else
    TMUX_MPC=1
  fi
}

[ "${TILIX}" ] || {
  [ "${RETRO}" ] || {
    [ "${have_gnome}" ] || {
      echo "No option '-t' or '-r' indicates use gnome-terminal"
      echo "terminal emulator. However, gnome-terminal is either"
      echo "not installed or not in your path."
      echo "You can install gnome-terminal using apt or dnf as follows:"
      printf "\n\n\tsudo apt install gnome-terminal\nor"
      printf "\n\tsudo dnf install gnome-terminal\n\n"
      [ "${have_tilix}" ] || usage
      echo "Alternately, invoke mpplus with the '-t' option to use tilix."
      echo "Continuing with tilix as the terminal emulator."
      TILIX=1
    }
  }
  [ "${TILIX}" ] || {
    [ "${have_gnome}" ] || {
      echo "No option '-t' indicates use gnome-terminal terminal emulator."
      echo "However, gnome-terminal is not installed or not in your path."
      echo "You can install gnome-terminal using apt or dnf as follows:"
      printf "\n\n\tsudo apt install gnome-terminal\nor"
      printf "\n\tsudo dnf install gnome-terminal\n\n"
      [ "${have_tilix}" ] || usage
      echo "Alternately, invoke mpplus with the '-t' option to use tilix."
      echo "Continuing with tilix as the terminal emulator."
      TILIX=1
    }
  }
}

[ "${HALFHEIGHT}" ] && [ "${QRTRHEIGHT}" ] && {
  [ "${FULLSCREEN}" ] && {
    echo "Only one of '-h' and '-q' should be specified"
    echo "Quarter-height overrides half-height. Using quarter-height."
    HALFHEIGHT=
  }
}
[ "${HALFHEIGHT}" ] && {
  [ "${FULLSCREEN}" ] || {
    echo "Height settings only apply when in fullscreen mode."
    echo "Ignoring '-h' half-height option."
    HALFHEIGHT=
  }
}
[ "${QRTRHEIGHT}" ] && {
  [ "${FULLSCREEN}" ] || {
    echo "Height settings only apply when in fullscreen mode."
    echo "Ignoring '-q' quarter-height option."
    QRTRHEIGHT=
  }
}

[ "${USAGE}" ] && usage

if [ "${INTERACTIVE}" ]
then
  show_main_menu
else
  if [ "${FZMPOPT}" ]
  then
    fzmp -${FZMPOPT}
  else
    make_it_so
  fi
fi
