#!/bin/bash
#
# mpcplus-tmux - run the mpcplus MPD client, spectrum visualizer using tmuxp

export SESSION=musicplayerplus

if [ -f ${HOME}/.config/mpcplus/config ]
then
  MPCDIR=".config/mpcplus"
else
  if [ -f ${HOME}/.mpcplus/config ]
  then
    MPCDIR=".mpcplus"
  else
    mppinit
    MPCDIR=".config/mpcplus"
  fi
fi

USE_TMUXP=1
have_tmuxp=`type -p tmuxp`
[ "${have_tmuxp}" ] || {
  if [ -x ${HOME}/${MPCDIR}/mpcplus-art.sh ]
  then
    USE_TMUXP=
  else
    echo ""
    echo "ERROR: Could not find 'tmuxp' in PATH."
    echo "To use 'tmuxp', install with 'python -m pip install tmuxp'"
    echo "or verify it is in your execution PATH."
    echo ""
    exit 1
  fi
}

usage() {
  printf "\nUsage: mpcplus-tmux [-a] [-f] [-g] [-p script] [-r] [-u]"
  printf "\nWhere:"
  printf "\n\t-a indicates display album cover art"
  printf "\n\t-f indicates we have been invoked from a fullscreen window"
  printf "\n\t-g indicates do not use gradient colors for spectrum visualizer"
  printf "\n\t-p script specifies an asciimatics script to run"
  printf " in the visualizer pane"
  printf "\n\t-r indicates record tmux session with asciinema"
  printf "\n\t-u displays this usage message and exits\n"
  printf "\nDefaults: cover art disabled, ascii art disabled, recording disabled"
  printf "\nThis run:"
  if [ "${PYART}" ]
  then
    printf "\n\tascii art enabled"
  else
    printf "\n\tascii art disabled"
  fi
  if [ "${RECORD}" ]
  then
    printf "\n\trecording enabled"
  else
    printf "\n\trecording disabled"
  fi
  printf "\nType 'man mpcplus-tmux' for detailed usage info on mpcplus-tmux"
  printf "\nType 'man mpcplus' for detailed usage info on the mpcplus MPD client\n"
  exit 1
}

USE_GRAD=1
PYART=
RECORD=
USAGE=
ARGS="$*"
while getopts "afgp:ru" flag; do
    case $flag in
        a)
          [ -x ${HOME}/${MPCDIR}/mpcplus-art.sh ] && USE_TMUXP=
          ;;
        f)
          ;;
        g)
          USE_GRAD=
          ;;
        p)
          PYART=${OPTARG}
          [ "${PYART}" == "rocks" ] || [ "${PYART}" == "mpprocks" ] && {
            [ -x ${HOME}/${MPCDIR}/mpcplus-art.sh ] && USE_TMUXP=
          }
          ;;
        r)
          have_nema=`type -p asciinema`
          [ "${have_nema}" ] && RECORD=1
          ;;
        u)
          USAGE=1
          ;;
    esac
done
shift $(( OPTIND - 1 ))

[ "${USAGE}" ] && usage

[ "${USE_TMUXP}" ] || {
  ${HOME}/${MPCDIR}/mpcplus-art.sh ${ARGS}
  exit 0
}

numrows=`tput lines`
MAIN_PANE_HEIGHT=$((2 * ${numrows} / 3))
FZFCOMM="fzmp -a"
if [ "${USE_GRAD}" ]
then
  VIZCOMM="mppcava"
else
  VIZCOMM="mppcava -p ${HOME}/.config/mppcava/config-tmux"
fi
[ "${PYART}" ] && {
  have_pyart=`type -p mpp${PYART}`
  [ "${have_pyart}" ] && {
    VIZCOMM="mpp${PYART}"
    MAIN_PANE_HEIGHT=$((${numrows} / 2))
  }
}
export FZFCOMM MAIN_PANE_HEIGHT VIZCOMM

tmuxp load mpcplus-env

[ "${RECORD}" ] && {
  tmux d
  VID_DIR=$HOME/Videos
  [ -d ${VID_DIR} ] || mkdir ${VID_DIR}
  REC_DIR=${VID_DIR}/asciinema
  [ -d ${REC_DIR} ] || mkdir ${REC_DIR}
  echo "Recording this ${SESSION} session with asciinema"
  asciinema rec --command "tmux attach -t ${SESSION}" ${REC_DIR}/${SESSION}-$(date +%F--%H%M).cast
}
