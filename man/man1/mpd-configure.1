.\" Automatically generated by Pandoc 2.19.2
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "MPD-CONFIGURE" "1" "September 13, 2022" "mpd-configure 1.0.0" "User Manual"
.hy
.SS NAME
.PP
mpd-configure - create a configuration file for the Music Player Daemon
(MPD)
.SS SYNOPSIS
.PP
\f[B]mpd-configure\f[R] [-o PATH] [-l a|d|u] [-c REGEXP] [-a HWADDRESS]
[-q] [--nobackup]
.SS DESCRIPTION
.PP
The \f[V]mpd-configure\f[R] bash script creates a valid configuration
file for [mpd], optimised for bit perfect playback of any digital audio
file, including those of high resolution.
.PP
With default settings the script uses the first available alsa audio
interface by using its hardware address (in the form of
\f[V]hw:x,y\f[R]), and has automagic procedures for things like the
music directory and directory where files are stored, the number of
items in the music direcory and the UPNP name.
When multiple audio interfaces are found, the user is presented with a
choice.
.SS USAGE
.PP
The scripts lists all available alsa playback devices on the host.
If multiple are found, the user is prompted to enter the hardware
address of the device to be used.
The \f[V]-n\f[R] (\f[V]--noprompts\f[R]) option skips the prompt and
uses the first interface found instead.
The \f[V]-l\f[R] (\f[V]--limit\f[R]), \f[V]-c\f[R]
(\f[V]--customfilter\f[R]) and \f[V]-a\f[R] (\f[V]--address\f[R]) may be
used to filter the returned alsa devices.
.IP
.nf
\f[C]
-o PATH, --outputfile PATH    
    Saves the result in the file specified with \[ga]PATH\[aq].
    When this is an existing file, the scripts prompts
    the user to overwrite it, and makes a backup of the
    original file unless the \[ga]--nobackup\[aq] option is used).
-l TYPEFILTER, --limit TYPEFILTER   
    Limit the list of available audio interfaces to
    TYPEFILTER. Can be one of \[ga]a\[aq] (or \[ga]analog\[aq]),
    \[ga]d\[aq] (or \[ga]digital\[aq]), \[ga]u\[aq] (or \[ga]usb\[aq]), the
    latter for USB Audio Class (UAC1 or UAC2) devices.
-c REGEXP, --customlimit REGEXP 
    Limit the list further to match \[ga]REGEXP\[aq].
-a HWADDRESS, --address HWADDRESS   
    Limits the list further by the audio interface
    specified with HWADDRESS, eg. \[ga]hw:0,1\[aq].
-q, --quiet
    Surpress listing each interface with its details,
    ie. only store the details of each card in the appropriate arrays.
-n, --noprompts
    Surpress prompting for the interface to use
    and/or to overwrite an existing conffile. Use the
    first available interface (matching the filters) instead.
--nobackup
    By default the scripts backs up an existing output file
    before overwriting. Setting this option prevents that and
    overwrites the file without making a backup.
-h, --help
    Show this help message and exit.
\f[R]
.fi
.SS Running the script
.PP
Run the script with default settings to display the contents of the
resulting mpd configuration file:
.IP
.nf
\f[C]
mpd-configure
\f[R]
.fi
.SS Storing the output of the script in a file
.PP
The output of the scripts can simply be redirected to a file (in this
example \f[V]mympd.conf\f[R]):
.IP
.nf
\f[C]
mpd-configure > mympd.conf
\f[R]
.fi
.PP
Although the same may be achieved by using the \f[V]-o\f[R] or
\f[V]--output\f[R] command line parameters or setting
\f[V]CONF_MPD_CONFFILE\f[R] on the command line.
This has the benefit that the script detects if the target file exists,
in which case the user is prompted to overwrite it, while making an
automated \f[I]backup\f[R] of the original file:
.IP
.nf
\f[C]
mpd-configure -o \[dq]mympd.conf\[dq]
# or:
CONF_MPD_CONFFILE=\[dq]mympd.conf\[dq] mpd-configure
\f[R]
.fi
.SS More advanced usage example
.PP
Additional setting are available using environment variables or using
the file
\f[V]/usr/share/musicplayerplus/mpd/mpd-configure/mpd-configure.conf\f[R]
and configuration snippet files in the
\f[V]/usr/share/musicplayerplus/mpd/mpd-configure/confs-available/\f[R]
directory.
.PP
For example to specify \f[V]CONF_MPD_MUSICDIR\f[R] which sets the
\f[V]music_directory\f[R] and saving the resulting mpd configuration
file in \f[V]mympd.conf\f[R], use:
.IP
.nf
\f[C]
CONF_MPD_MUSICDIR=\[dq]/srv/media/music\[dq] mpd-configure -o \[dq]mympd.conf\[dq]
\f[R]
.fi
.PP
By default \f[V]mpd-configure\f[R] prompts the user to overwrite the
specified file if it exists, and makes a backup of it.
.SS Fully automated usage example
.PP
A fully automated example which does not prompt the user (\f[V]-n\f[R]),
uses the first available USB Audio Class interface (\f[V]-l u\f[R]) and
sets some paths, while creating a backup of the original
\f[V]/etc/mpd.conf\f[R] in case it exists:
.IP
.nf
\f[C]
CONF_MPD_MUSICDIR=\[dq]/srv/media/music\[dq] CONF_MPD_HOMEDIR=\[dq]/var/lib/mpd\[dq] \[rs]
mpd-configure -l u -n -o \[dq]/etc/mpd.conf\[dq]
\f[R]
.fi
.PP
To see all available command line options run the script with
\f[V]-h\f[R] or \f[V]--help\f[R]:
.IP
.nf
\f[C]
mpd-configure -h
\f[R]
.fi
.PP
\f[V]mpd-configure\f[R] relies on the accompanying bash script
\f[V]alsa-capabilities\f[R] for getting information about the available
audio output interfaces from alsa.
.SS Detailed usage instructions
.PP
After creating a mpd configuration file, \f[V]mpd\f[R] can be told to
use this configuration file with:
.IP
.nf
\f[C]
    mpd ./mpd.conf
\f[R]
.fi
.PP
To use the generated configuration file system wide, it can be copied to
the system wide mpd configuration file when you want to run
\f[V]mpd\f[R] as a system daemon:
.IP
.nf
\f[C]
    sudo mpd-configure -o \[dq]/etc/mpd.conf\[dq]
    sudo systemctl restart mpd
\f[R]
.fi
.SS More complex usage
.PP
For debugging or testing purposes one may set the
\f[V]INCLUDE_COMMENTS\f[R] and/or \f[V]DEBUG\f[R] parameters through the
\f[V]mpd-configure.conf\f[R] file or on the command line, eg:
.IP
.nf
\f[C]
    DEBUG=\[dq]True\[dq] INCLUDE_COMMENTS=\[dq]True\[dq] mpd-configure
\f[R]
.fi
.PP
In dynamic environments in which hardware may be altered each boot,
connected to whatever USB DAC, the script could be put in a logon script
or systemd service file.
.SS Usage as a systemd service
.PP
The script is fast and stable enough to function as a systemd service.
By setting \f[V]Before=mpd.service\f[R] and \f[V]Wants=mpd.service\f[R]
in the service file systemd makes sure mpd-configure is run before mpd
is started, and tries to start mpd.
.SS Usage from within another bash or sh script
.PP
The bash script
\f[V]/usr/share/musicplayerplus/mpd/mpd-configure/examples/bash-example.sh\f[R]
demonstrates the way alsa-capabilities can be used from another bash
script.
.PP
This demo script returns the monitoring file of the file specified as an
argument:
.IP
.nf
\f[C]
bash examples/bash-example.sh hw:1,0
\f[R]
.fi
.PP
Result:
.IP
.nf
\f[C]
the audio card with alsa hardware address hw:1,0 can be monitored with:
/proc/asound/card1/stream0
\f[R]
.fi
.SS Usage from within python
.PP
Assuming your in the
\f[V]/usr/share/musicplayerplus/mpd/mpd-configure\f[R] directory, run:
.IP
.nf
\f[C]
    python examples/get-interfaces.py
\f[R]
.fi
.PP
The python script \f[V]./examples/get-interfaces.py\f[R] uses a helper
bash script (\f[V]./examples/get-interfaces-for-python.sh\f[R]), which
in turn sources \f[V]alsa-capabilities\f[R].
.SS PREFERENCES
.PP
Preferences can be set in the file
\f[V]/usr/share/musicplayerplus/mpd/mpd-configure/mpd-configure.conf\f[R].
By default all preferences are commented out.
.PP
The script uses configuration file snippets in the
\f[V]./confs-available/\f[R] directory.
By symlinking them to the \f[V]./confs-enabled/\f[R] directory, they
will be included by \f[V]mpd-configure\f[R] in the resulting mpd
configuration file.
Any bash variable in those configuration snippets, will be expanded to
their calculated values by the script.
.SS General environment variables
.PP
\f[V]DEBUG\f[R] Output values of variables and program flow to std_err
for easier debugging.
Possible values:
.IP \[bu] 2
commented out: disabled (Default).
.IP \[bu] 2
\f[V]1\f[R] (or non-empty): enabled.
.PP
\f[V]INCLUDE_COMMENTS\f[R] Include commented and empty lines from
configuration snippet files in the generated mpd configuration file:
.IP \[bu] 2
commentend out: disabled (Default).
.IP \[bu] 2
\f[V]1\f[R] (or non-empty): enabled
.PP
\f[V]CONF_MPD_CONFFILE\f[R] Path to where the generated mpd
configuration file will be written.
Possible values:
.IP \[bu] 2
commented out: don\[aq]t write to a file (Default).
One may redirect the output of the script using:
.RS 2
.PP
bash mpd-configure > /path/to/mpd.conf
.RE
.IP \[bu] 2
\f[V]/path/to/mpd.conf\f[R]: use the path specified.
.SS Alsa and sound
.PP
\f[V]LIMIT_INTERFACE_TYPE\f[R] A keyword which limits the type of alsa
interfaces to be returned:
.PP
Possible values:
.IP \[bu] 2
\f[V]usb\f[R], \f[V]digital\f[R] or \f[V]analog\f[R]
.IP \[bu] 2
Comment it out (or leave it empty) to prevent filtering.
.PP
Default value:
.IP \[bu] 2
commented out (or empty \[dq]\[dq]): do not limit the interfaces that
will be found.
.PP
\f[V]LIMIT_INTERFACE_FILTER\f[R] The available output devices (after
filtering with \f[V]LIMIT_INTERFACE_TYPE\f[R] when applicable) may be
further limited using a regular expression (which thus is case
sensentive) which should match the output of:
.IP
.nf
\f[C]
LANG=C aplay -l | grep \[ha]card
\f[R]
.fi
.PP
If for example the output is like this:
.IP
.nf
\f[C]
card 0: MID [HDA Intel MID], device 0: HDMI 0 [HDMI 0]
card 1: receiv [Pink Faun USB 32/384 USB receiv], device 0: USB Audio [USB Audio]
\f[R]
.fi
.PP
\&...
you could use one of the following values to match the \f[I]second\f[R]
line (which in this example matches the alsa \f[V]hw:1,1\f[R] interface,
eg.
the second interface of the second sound card):
.IP
.nf
\f[C]
\[dq]USB Audio\[dq]
\[dq][uU][sS][bB] \[rs]w+ \[dq]
\f[R]
.fi
.PP
but not
.IP
.nf
\f[C]
\[dq]USB audio\[dq]
\f[R]
.fi
.PP
Possible values:
.IP \[bu] 2
empty or commented out: no filtering is applied
.IP \[bu] 2
\f[V]Some regular expression\f[R]: use the (first) interface which
matches the regexp.
.PP
Default value:
.IP \[bu] 2
commented out (or empty \[dq]\[dq]): use the first available interface.
.PP
Handling of pulseaudio \f[V]OPT_DISABLE_PULSEAUDIO\f[R] Disable
pulseaudio by modifyin the current users\[aq]
\f[V]\[ti]/.pulseaudio/client.conf\f[R]
.PP
Possible values:
.IP \[bu] 2
non-empty (\f[V]1\f[R] or \[dq]True\[dq]) disables pulseaudio.
.IP \[bu] 2
Comment it out (or leave it empty) to prevent disabling of pulseaudio.
.PP
Default value:
.IP \[bu] 2
commented out (or empty \[dq]\[dq]): do not disable it.
.PP
\f[V]OPT_STOP_PULSEAUDIO\f[R] Temporary disable and stop pulseaudio
during detection of alsa interfaces.
After the script pulseaudio\[aq]s client configuration and run state
will restored.
.PP
Possible values:
.IP \[bu] 2
non-empty (\f[V]1\f[R] or \[dq]True\[dq]) temporary disables and stops
pulseaudio.
.IP \[bu] 2
Comment it out (or leave it empty) to prevent temporary disabling and
stopping of pulseaudio.
.PP
Default value:
.IP \[bu] 2
commented out (or empty \[dq]\[dq]): do not disable it.
.PP
See the configuration snippet files and accompanying \f[V]README\f[R] in
\f[V]./confs-available\f[R] for additional parameters and and
explanation for their functions.
.SS AUTHORS
.PP
Written by Ronald van Engelen <ronalde@lacocina.nl>
.PP
Modified and adapted by Ronald Record <github@ronrecord.com>
.SS LICENSING
.PP
MPD-CONFIGURE is distributed under an Open Source license.
See the file LICENSE in the MPD-CONFIGURE source distribution for
information on terms & conditions for accessing and otherwise using
MPD-CONFIGURE and for a DISCLAIMER OF ALL WARRANTIES.
.SS BUGS
.PP
Submit bug reports online at:
.PP
<https://github.com/doctorfree/MusicPlayerPlus/issues>
.SS SEE ALSO
.PP
\f[B]mpplus\f[R](1), \f[B]alsa-capabilities\f[R](1)
.PP
Full documentation and sources at:
.PP
<https://github.com/doctorfree/MusicPlayerPlus>
