.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "BEETSCONFIG" "5" "July 12, 2022" "beets 1.6.0" "User Manual"
.hy
.SH NAME
.PP
beetsconfig - Beets media library management system configuration
.SH DESCRIPTION
.PP
Beets has an extensive configuration system that lets you customize
nearly every aspect of its operation.
To configure beets, you create a file called \f[V]config.yaml\f[R].
The location of the file depend on your platform (type
\f[V]beet config -p\f[R] to see the path on your system):
.IP \[bu] 2
On Unix-like OSes, write \f[V]\[ti]/.config/beets/config.yaml\f[R].
.IP \[bu] 2
On Windows, use \f[V]%APPDATA%\[rs]beets\[rs]config.yaml\f[R].
This is usually in a directory like
\f[V]C:\[rs]Users\[rs]You\[rs]AppData\[rs]Roaming\f[R].
.IP \[bu] 2
On OS X, you can use either the Unix location or
\f[V]\[ti]/Library/Application Support/beets/config.yaml\f[R].
.PP
You can launch your text editor to create or update your configuration
by typing \f[V]beet config -e\f[R].
(See the \f[V]config-cmd\f[R]{.interpreted-text role=\[dq]ref\[dq]}
command for details.)
It is also possible to customize the location of the configuration file
and even use multiple layers of configuration.
See Configuration Location, below.
.PP
The config file uses YAML (https://yaml.org/) syntax.
You can use the full power of YAML, but most configuration options are
simple key/value pairs.
This means your config file will look like this:
.IP
.nf
\f[C]
option: value
another_option: foo
bigger_option:
    key: value
    foo: bar
\f[R]
.fi
.PP
In YAML, you will need to use spaces (not tabs!)
to indent some lines.
If you have questions about more sophisticated syntax, take a look at
the YAML (https://yaml.org/) documentation.
.PP
The rest of this page enumerates the dizzying litany of configuration
options available in beets.
You might also want to see an
\f[V]example <config-example>\f[R]{.interpreted-text
role=\[dq]ref\[dq]}.
.PP
::: {.contents local=\[dq]\[dq] depth=\[dq]2\[dq]} :::
.SS Global Options
.PP
These options control beets\[aq] global operation.
.SS library
.PP
Path to the beets library file.
By default, beets will use a file called \f[V]library.db\f[R] alongside
your configuration file.
.SS directory
.PP
The directory to which files will be copied/moved when adding them to
the library.
Defaults to a folder called \f[V]Music\f[R] in your home directory.
.SS plugins
.PP
A space-separated list of plugin module names to load.
See \f[V]using-plugins\f[R]{.interpreted-text role=\[dq]ref\[dq]}.
.SS include
.PP
A space-separated list of extra configuration files to include.
Filenames are relative to the directory containing
\f[V]config.yaml\f[R].
.SS pluginpath
.PP
Directories to search for plugins.
Each Python file or directory in a plugin path represents a plugin and
should define a subclass of \f[V]BeetsPlugin\f[R]{.interpreted-text
role=\[dq]class\[dq]}.
A plugin can then be loaded by adding the filename to the
[plugins]{.title-ref} configuration.
The plugin path can either be a single string or a list of strings---so,
if you have multiple paths, format them as a YAML list like so:
.IP
.nf
\f[C]
pluginpath:
    - /path/one
    - /path/two
\f[R]
.fi
.SS ignore
.PP
A list of glob patterns specifying file and directory names to be
ignored when importing.
By default, this consists of \f[V].*\f[R], \f[V]*\[ti]\f[R],
\f[V]System Volume Information\f[R], \f[V]lost+found\f[R] (i.e., beets
ignores Unix-style hidden files, backup files, and directories that
appears at the root of some Linux and Windows filesystems).
.SS ignore_hidden
.PP
Either \f[V]yes\f[R] or \f[V]no\f[R]; whether to ignore hidden files
when importing.
On Windows, the \[dq]Hidden\[dq] property of files is used to detect
whether or not a file is hidden.
On OS X, the file\[aq]s \[dq]IsHidden\[dq] flag is used to detect
whether or not a file is hidden.
On both OS X and other platforms (excluding Windows), files (and
directories) starting with a dot are detected as hidden files.
.SS replace
.PP
A set of regular expression/replacement pairs to be applied to all
filenames created by beets.
Typically, these replacements are used to avoid confusing problems or
errors with the filesystem (for example, leading dots, which hide files
on Unix, and trailing whitespace, which is illegal on Windows).
To override these substitutions, specify a mapping from regular
expression to replacement strings.
For example, \f[V][xy]: z\f[R] will make beets replace all instances of
the characters \f[V]x\f[R] or \f[V]y\f[R] with the character
\f[V]z\f[R].
.PP
If you do change this value, be certain that you include at least enough
substitutions to avoid causing errors on your operating system.
Here are the default substitutions used by beets, which are sufficient
to avoid unexpected behavior on all popular platforms:
.IP
.nf
\f[C]
replace:
    \[aq][\[rs]\[rs]/]\[aq]: _
    \[aq]\[ha]\[rs].\[aq]: _
    \[aq][\[rs]x00-\[rs]x1f]\[aq]: _
    \[aq][<>:\[dq]\[rs]?\[rs]*\[rs]|]\[aq]: _
    \[aq]\[rs].$\[aq]: _
    \[aq]\[rs]s+$\[aq]: \[aq]\[aq]
    \[aq]\[ha]\[rs]s+\[aq]: \[aq]\[aq]
    \[aq]\[ha]-\[aq]: _
\f[R]
.fi
.PP
These substitutions remove forward and back slashes, leading dots, and
control characters---all of which is a good idea on any OS.
The fourth line removes the Windows \[dq]reserved characters\[dq]
(useful even on Unix for for compatibility with Windows-influenced
network filesystems like Samba).
Trailing dots and trailing whitespace, which can cause problems on
Windows clients, are also removed.
.PP
When replacements other than the defaults are used, it is possible that
they will increase the length of the path.
In the scenario where this leads to a conflict with the maximum filename
length, the default replacements will be used to resolve the conflict
and beets will display a warning.
.PP
Note that paths might contain special characters such as typographical
quotes (\f[V]\[lq]\[rq]\f[R]).
With the configuration above, those will not be replaced as they
don\[aq]t match the typewriter quote (\f[V]\[dq]\f[R]).
To also strip these special characters, you can either add them to the
replacement list or use the \f[V]asciify-paths\f[R]{.interpreted-text
role=\[dq]ref\[dq]} configuration option below.
.SS path_sep_replace {#path-sep-replace}
.PP
A string that replaces the path separator (for example, the forward
slash \f[V]/\f[R] on Linux and MacOS, and the backward slash
\f[V]\[rs]\[rs]\f[R] on Windows) when generating filenames with beets.
This option is related to \f[V]replace\f[R]{.interpreted-text
role=\[dq]ref\[dq]}, but is distict from it for technical reasons.
.PP
::: warning ::: title Warning :::
.PP
Changing this option is potentially dangerous.
For example, setting it to the actual path separator could create
directories in unexpected locations.
Use caution when changing it and always try it out on a small number of
files before applying it to your whole library.
:::
.PP
Default: \f[V]_\f[R].
.SS asciify_paths {#asciify-paths}
.PP
Convert all non-ASCII characters in paths to ASCII equivalents.
.PP
For example, if your path template for singletons is
\f[V]singletons/$title\f[R] and the title of a track is
\[dq]Caf\['e]\[dq], then the track will be saved as
\f[V]singletons/Cafe.mp3\f[R].
The changes take place before applying the
\f[V]replace\f[R]{.interpreted-text role=\[dq]ref\[dq]} configuration
and are roughly equivalent to wrapping all your path templates in the
\f[V]%asciify{}\f[R]
\f[V]template function <template-functions>\f[R]{.interpreted-text
role=\[dq]ref\[dq]}.
.PP
This uses the unidecode module (https://pypi.org/project/Unidecode)
which is language agnostic, so some characters may be transliterated
from a different language than expected.
For example, Japanese kanji will usually use their Chinese readings.
.PP
Default: \f[V]no\f[R].
.SS art_filename {#art-filename}
.PP
When importing album art, the name of the file (without extension) where
the cover art image should be placed.
This is a template string, so you can use any of the syntax available to
\f[V]/reference/pathformat\f[R]{.interpreted-text role=\[dq]doc\[dq]}.
Defaults to \f[V]cover\f[R] (i.e., images will be named
\f[V]cover.jpg\f[R] or \f[V]cover.png\f[R] and placed in the album\[aq]s
directory).
.SS threaded
.PP
Either \f[V]yes\f[R] or \f[V]no\f[R], indicating whether the autotagger
should use multiple threads.
This makes things substantially faster by overlapping work: for example,
it can copy files for one album in parallel with looking up data in
MusicBrainz for a different album.
You may want to disable this when debugging problems with the
autotagger.
Defaults to \f[V]yes\f[R].
.SS format_item[]{#list_format_item}
.PP
Format to use when listing \f[I]individual items\f[R] with the
\f[V]list-cmd\f[R]{.interpreted-text role=\[dq]ref\[dq]} command and
other commands that need to print out items.
Defaults to \f[V]$artist - $album - $title\f[R].
The \f[V]-f\f[R] command-line option overrides this setting.
.PP
It used to be named [list_format_item]{.title-ref}.
.SS format_album[]{#list_format_album}
.PP
Format to use when listing \f[I]albums\f[R] with
\f[V]list-cmd\f[R]{.interpreted-text role=\[dq]ref\[dq]} and other
commands.
Defaults to \f[V]$albumartist - $album\f[R].
The \f[V]-f\f[R] command-line option overrides this setting.
.PP
It used to be named [list_format_album]{.title-ref}.
.SS sort_item
.PP
Default sort order to use when fetching items from the database.
Defaults to \f[V]artist+ album+ disc+ track+\f[R].
Explicit sort orders override this default.
.SS sort_album
.PP
Default sort order to use when fetching albums from the database.
Defaults to \f[V]albumartist+ album+\f[R].
Explicit sort orders override this default.
.SS sort_case_insensitive
.PP
Either \f[V]yes\f[R] or \f[V]no\f[R], indicating whether the case should
be ignored when sorting lexicographic fields.
When set to \f[V]no\f[R], lower-case values will be placed after
upper-case values (e.g., \f[I]Bar Qux foo\f[R]), while \f[V]yes\f[R]
would result in the more expected \f[I]Bar foo Qux\f[R].
Default: \f[V]yes\f[R].
.SS original_date
.PP
Either \f[V]yes\f[R] or \f[V]no\f[R], indicating whether matched albums
should have their \f[V]year\f[R], \f[V]month\f[R], and \f[V]day\f[R]
fields set to the release date of the \f[I]original\f[R] version of an
album rather than the selected version of the release.
That is, if this option is turned on, then \f[V]year\f[R] will always
equal \f[V]original_year\f[R] and so on.
Default: \f[V]no\f[R].
.SS artist_credit
.PP
Either \f[V]yes\f[R] or \f[V]no\f[R], indicating whether matched tracks
and albums should use the artist credit, rather than the artist.
That is, if this option is turned on, then \f[V]artist\f[R] will contain
the artist as credited on the release.
.SS per_disc_numbering
.PP
A boolean controlling the track numbering style on multi-disc releases.
By default (\f[V]per_disc_numbering: no\f[R]), tracks are numbered
per-release, so the first track on the second disc has track number N+1
where N is the number of tracks on the first disc.
If this \f[V]per_disc_numbering\f[R] is enabled, then the first
(non-pregap) track on each disc always has track number 1.
.PP
If you enable \f[V]per_disc_numbering\f[R], you will likely want to
change your \f[V]path-format-config\f[R]{.interpreted-text
role=\[dq]ref\[dq]} also to include \f[V]$disc\f[R] before
\f[V]$track\f[R] to make filenames sort correctly in album directories.
For example, you might want to use a path format like this:
.IP
.nf
\f[C]
paths:
    default: $albumartist/$album%aunique{}/$disc-$track $title
\f[R]
.fi
.PP
When this option is off (the default), even \[dq]pregap\[dq] hidden
tracks are numbered from one, not zero, so other track numbers may
appear to be bumped up by one.
When it is on, the pregap track for each disc can be numbered zero.
.SS aunique {#config-aunique}
.PP
These options are used to generate a string that is guaranteed to be
unique among all albums in the library who share the same set of keys.
.PP
The defaults look like this:
.IP
.nf
\f[C]
aunique:
    keys: albumartist album
    disambiguators: albumtype year label catalognum albumdisambig releasegroupdisambig
    bracket: \[aq][]\[aq]
\f[R]
.fi
.PP
See \f[V]aunique\f[R]{.interpreted-text role=\[dq]ref\[dq]} for more
details.
.SS terminal_encoding
.PP
The text encoding, as known to
Python (https://docs.python.org/2/library/codecs.html#standard-encodings),
to use for messages printed to the standard output.
It\[aq]s also used to read messages from the standard input.
By default, this is determined automatically from the locale environment
variables.
.SS clutter
.PP
When beets imports all the files in a directory, it tries to remove the
directory if it\[aq]s empty.
A directory is considered empty if it only contains files whose names
match the glob patterns in [clutter]{.title-ref}, which should be a list
of strings.
The default list consists of \[dq]Thumbs.DB\[dq] and
\[dq].DS_Store\[dq].
.PP
The importer only removes recursively searched subdirectories---the
top-level directory you specify on the command line is never deleted.
.SS max_filename_length
.PP
Set the maximum number of characters in a filename, after which names
will be truncated.
By default, beets tries to ask the filesystem for the correct maximum.
.SS id3v23
.PP
By default, beets writes MP3 tags using the ID3v2.4 standard, the latest
version of ID3.
Enable this option to instead use the older ID3v2.3 standard, which is
preferred by certain older software such as Windows Media Player.
.SS va_name
.PP
Sets the albumartist for various-artist compilations.
Defaults to \f[V]\[aq]Various Artists\[aq]\f[R] (the MusicBrainz
standard).
Affects other sources, such as
\f[V]/plugins/discogs\f[R]{.interpreted-text role=\[dq]doc\[dq]}, too.
.SS UI Options
.PP
The options that allow for customization of the visual appearance of the
console interface.
.PP
These options are available in this section:
.SS color
.PP
Either \f[V]yes\f[R] or \f[V]no\f[R]; whether to use color in console
output (currently only in the \f[V]import\f[R] command).
Turn this off if your terminal doesn\[aq]t support ANSI colors.
.PP
::: note ::: title Note :::
.PP
The [color]{.title-ref} option was previously a top-level configuration.
This is still respected, but a deprecation message will be shown until
your top-level [color]{.title-ref} configuration has been nested under
[ui]{.title-ref}.
:::
.SS colors
.PP
The colors that are used throughout the user interface.
These are only used if the \f[V]color\f[R] option is set to
\f[V]yes\f[R].
For example, you might have a section in your configuration file that
looks like this:
.IP
.nf
\f[C]
ui:
    color: yes
    colors:
        text_success: green
        text_warning: yellow
        text_error: red
        text_highlight: red
        text_highlight_minor: lightgray
        action_default: turquoise
        action: blue
\f[R]
.fi
.PP
Available colors: black, darkred, darkgreen, brown (darkyellow),
darkblue, purple (darkmagenta), teal (darkcyan), lightgray, darkgray,
red, green, yellow, blue, fuchsia (magenta), turquoise (cyan), white
.SS Importer Options
.PP
The options that control the \f[V]import-cmd\f[R]{.interpreted-text
role=\[dq]ref\[dq]} command are indented under the \f[V]import:\f[R]
key.
For example, you might have a section in your configuration file that
looks like this:
.IP
.nf
\f[C]
import:
    write: yes
    copy: yes
    resume: no
\f[R]
.fi
.PP
These options are available in this section:
.SS write {#config-import-write}
.PP
Either \f[V]yes\f[R] or \f[V]no\f[R], controlling whether metadata
(e.g., ID3) tags are written to files when using \f[V]beet import\f[R].
Defaults to \f[V]yes\f[R].
The \f[V]-w\f[R] and \f[V]-W\f[R] command-line options override this
setting.
.SS copy {#config-import-copy}
.PP
Either \f[V]yes\f[R] or \f[V]no\f[R], indicating whether to
\f[B]copy\f[R] files into the library directory when using
\f[V]beet import\f[R].
Defaults to \f[V]yes\f[R].
Can be overridden with the \f[V]-c\f[R] and \f[V]-C\f[R] command-line
options.
.PP
The option is ignored if \f[V]move\f[R] is enabled (i.e., beets can move
or copy files but it doesn\[aq]t make sense to do both).
.SS move {#config-import-move}
.PP
Either \f[V]yes\f[R] or \f[V]no\f[R], indicating whether to
\f[B]move\f[R] files into the library directory when using
\f[V]beet import\f[R].
Defaults to \f[V]no\f[R].
.PP
The effect is similar to the \f[V]copy\f[R] option but you end up with
only one copy of the imported file.
(\[dq]Moving\[dq] works even across filesystems; if necessary, beets
will copy and then delete when a simple rename is impossible.)
Moving files can be risky---it\[aq]s a good idea to keep a backup in
case beets doesn\[aq]t do what you expect with your files.
.PP
This option \f[I]overrides\f[R] \f[V]copy\f[R], so enabling it will
always move (and not copy) files.
The \f[V]-c\f[R] switch to the \f[V]beet import\f[R] command, however,
still takes precedence.
.SS link
.PP
Either \f[V]yes\f[R] or \f[V]no\f[R], indicating whether to use symbolic
links instead of moving or copying files.
(It conflicts with the \f[V]move\f[R], \f[V]copy\f[R] and
\f[V]hardlink\f[R] options.)
Defaults to \f[V]no\f[R].
.PP
This option only works on platforms that support symbolic links: i.e.,
Unixes.
It will fail on Windows.
.PP
It\[aq]s likely that you\[aq]ll also want to set \f[V]write\f[R] to
\f[V]no\f[R] if you use this option to preserve the metadata on the
linked files.
.SS hardlink
.PP
Either \f[V]yes\f[R] or \f[V]no\f[R], indicating whether to use hard
links instead of moving, copying, or symlinking files.
(It conflicts with the \f[V]move\f[R], \f[V]copy\f[R], and
\f[V]link\f[R] options.)
Defaults to \f[V]no\f[R].
.PP
As with symbolic links (see \f[V]link\f[R]{.interpreted-text
role=\[dq]ref\[dq]}, above), this will not work on Windows and you will
want to set \f[V]write\f[R] to \f[V]no\f[R].
Otherwise, metadata on the original file will be modified.
.SS reflink
.PP
Either \f[V]yes\f[R], \f[V]no\f[R], or \f[V]auto\f[R], indicating
whether to use copy-on-write file
clones (https://blogs.oracle.com/otn/save-disk-space-on-linux-by-cloning-files-on-btrfs-and-ocfs2)
(a.k.a.
\[dq]reflinks\[dq]) instead of copying or moving files.
The \f[V]auto\f[R] option uses reflinks when possible and falls back to
plain copying when necessary.
Defaults to \f[V]no\f[R].
.PP
This kind of clone is only available on certain filesystems: for
example, btrfs and APFS.
For more details on filesystem support, see the
pyreflink (https://reflink.readthedocs.io/en/latest/) documentation.
Note that you need to install \f[V]pyreflink\f[R], either through
\f[V]python -m pip install beets[reflink]\f[R] or
\f[V]python -m pip install reflink\f[R].
.PP
The option is ignored if \f[V]move\f[R] is enabled (i.e., beets can move
or copy files but it doesn\[aq]t make sense to do both).
.SS resume
.PP
Either \f[V]yes\f[R], \f[V]no\f[R], or \f[V]ask\f[R].
Controls whether interrupted imports should be resumed.
\[dq]Yes\[dq] means that imports are always resumed when possible;
\[dq]no\[dq] means resuming is disabled entirely; \[dq]ask\[dq] (the
default) means that the user should be prompted when resuming is
possible.
The \f[V]-p\f[R] and \f[V]-P\f[R] flags correspond to the \[dq]yes\[dq]
and \[dq]no\[dq] settings and override this option.
.SS incremental
.PP
Either \f[V]yes\f[R] or \f[V]no\f[R], controlling whether imported
directories are recorded and whether these recorded directories are
skipped.
This corresponds to the \f[V]-i\f[R] flag to \f[V]beet import\f[R].
.SS incremental_skip_later
.PP
Either \f[V]yes\f[R] or \f[V]no\f[R], controlling whether skipped
directories are recorded in the incremental list.
When set to \f[V]yes\f[R], skipped directories won\[aq]t be recorded,
and beets will try to import them again later.
When set to \f[V]no\f[R], skipped directories will be recorded, and
skipped later.
Defaults to \f[V]no\f[R].
.SS from_scratch
.PP
Either \f[V]yes\f[R] or \f[V]no\f[R] (default), controlling whether
existing metadata is discarded when a match is applied.
This corresponds to the \f[V]--from_scratch\f[R] flag to
\f[V]beet import\f[R].
.SS quiet
.PP
Either \f[V]yes\f[R] or \f[V]no\f[R] (default), controlling whether to
ask for a manual decision from the user when the importer is unsure how
to proceed.
This corresponds to the \f[V]--quiet\f[R] flag to \f[V]beet import\f[R].
.SS quiet_fallback
.PP
Either \f[V]skip\f[R] (default) or \f[V]asis\f[R], specifying what
should happen in quiet mode (see the \f[V]-q\f[R] flag to
\f[V]import\f[R], above) when there is no strong recommendation.
.SS none_rec_action
.PP
Either \f[V]ask\f[R] (default), \f[V]asis\f[R] or \f[V]skip\f[R].
Specifies what should happen during an interactive import session when
there is no recommendation.
Useful when you are only interested in processing medium and strong
recommendations interactively.
.SS timid
.PP
Either \f[V]yes\f[R] or \f[V]no\f[R], controlling whether the importer
runs in \f[I]timid\f[R] mode, in which it asks for confirmation on every
autotagging match, even the ones that seem very close.
Defaults to \f[V]no\f[R].
The \f[V]-t\f[R] command-line flag controls the same setting.
.SS log {#import_log}
.PP
Specifies a filename where the importer\[aq]s log should be kept.
By default, no log is written.
This can be overridden with the \f[V]-l\f[R] flag to \f[V]import\f[R].
.SS default_action
.PP
One of \f[V]apply\f[R], \f[V]skip\f[R], \f[V]asis\f[R], or
\f[V]none\f[R], indicating which option should be the \f[I]default\f[R]
when selecting an action for a given match.
This is the action that will be taken when you type return without an
option letter.
The default is \f[V]apply\f[R].
.SS languages
.PP
A list of locale names to search for preferred aliases.
For example, setting this to \f[V]en\f[R] uses the transliterated artist
name \[dq]Pyotr Ilyich Tchaikovsky\[dq] instead of the Cyrillic script
for the composer\[aq]s name when tagging from MusicBrainz.
You can use a space-separated list of language abbreviations, like
\f[V]en jp es\f[R], to specify a preference order.
Defaults to an empty list, meaning that no language is preferred.
.SS detail
.PP
Whether the importer UI should show detailed information about each
match it finds.
When enabled, this mode prints out the title of every track, regardless
of whether it matches the original metadata.
(The default behavior only shows changes.)
Default: \f[V]no\f[R].
.SS group_albums
.PP
By default, the beets importer groups tracks into albums based on the
directories they reside in.
This option instead uses files\[aq] metadata to partition albums.
Enable this option if you have directories that contain tracks from many
albums mixed together.
.PP
The \f[V]--group-albums\f[R] or \f[V]-g\f[R] option to the
\f[V]import-cmd\f[R]{.interpreted-text role=\[dq]ref\[dq]} command is
equivalent, and the \f[I]G\f[R] interactive option invokes the same
workflow.
.PP
Default: \f[V]no\f[R].
.SS autotag
.PP
By default, the beets importer always attempts to autotag new music.
If most of your collection consists of obscure music, you may be
interested in disabling autotagging by setting this option to
\f[V]no\f[R].
(You can re-enable it with the \f[V]-a\f[R] flag to the
\f[V]import-cmd\f[R]{.interpreted-text role=\[dq]ref\[dq]} command.)
.PP
Default: \f[V]yes\f[R].
.SS duplicate_action
.PP
Either \f[V]skip\f[R], \f[V]keep\f[R], \f[V]remove\f[R], \f[V]merge\f[R]
or \f[V]ask\f[R].
Controls how duplicates are treated in import task.
\[dq]skip\[dq] means that new item(album or track) will be skipped;
\[dq]keep\[dq] means keep both old and new items; \[dq]remove\[dq] means
remove old item; \[dq]merge\[dq] means merge into one album;
\[dq]ask\[dq] means the user should be prompted for the action each
time.
The default is \f[V]ask\f[R].
.SS bell
.PP
Ring the terminal bell to get your attention when the importer needs
your input.
.PP
Default: \f[V]no\f[R].
.SS set_fields
.PP
A dictionary indicating fields to set to values for newly imported
music.
Here\[aq]s an example:
.IP
.nf
\f[C]
set_fields:
    genre: \[aq]To Listen\[aq]
    collection: \[aq]Unordered\[aq]
\f[R]
.fi
.PP
Other field/value pairs supplied via the \f[V]--set\f[R] option on the
command-line override any settings here for fields with the same name.
.PP
Fields are set on both the album and each individual track of the album.
Fields are persisted to the media files of each track.
.PP
Default: \f[V]{}\f[R] (empty).
.SS MusicBrainz Options {#musicbrainz-config}
.PP
You can instruct beets to use your own MusicBrainz
database (https://musicbrainz.org/doc/MusicBrainz_Server/Setup) instead
of the main server (https://musicbrainz.org/).
Use the \f[V]host\f[R], \f[V]https\f[R] and \f[V]ratelimit\f[R] options
under a \f[V]musicbrainz:\f[R] header, like so:
.IP
.nf
\f[C]
musicbrainz:
    host: localhost:5000
    https: no
    ratelimit: 100
\f[R]
.fi
.PP
The \f[V]host\f[R] key, of course, controls the Web server hostname (and
port, optionally) that will be contacted by beets (default:
musicbrainz.org).
The \f[V]https\f[R] key makes the client use HTTPS instead of HTTP.
This setting applies only to custom servers.
The official MusicBrainz server always uses HTTPS.
(Default: no.)
The server must have search indices enabled (see Building search
indexes (https://musicbrainz.org/doc/Development/Search_server_setup)).
.PP
The \f[V]ratelimit\f[R] option, an integer, controls the number of Web
service requests per second (default: 1).
\f[B]Do not change the rate limit setting\f[R] if you\[aq]re using the
main MusicBrainz server---on this public server, you\[aq]re
limited (https://musicbrainz.org/doc/XML_Web_Service/Rate_Limiting) to
one request per second.
.SS enabled {#musicbrainz.enabled}
.PP
This option allows you to disable using MusicBrainz as a metadata
source.
This applies if you use plugins that fetch data from alternative sources
and should make the import process quicker.
.PP
Default: \f[V]yes\f[R].
.SS searchlimit
.PP
The number of matches returned when sending search queries to the
MusicBrainz server.
.PP
Default: \f[V]5\f[R].
.SS extra_tags
.PP
By default, beets will use only the artist, album, and track count to
query MusicBrainz.
Additional tags to be queried can be supplied with the
\f[V]extra_tags\f[R] setting.
For example:
.IP
.nf
\f[C]
musicbrainz:
    extra_tags: [year, catalognum, country, media, label]
\f[R]
.fi
.PP
This setting should improve the autotagger results if the metadata with
the given tags match the metadata returned by MusicBrainz.
.PP
Note that the only tags supported by this setting are the ones listed in
the above example.
.PP
Default: \f[V][]\f[R]
.SS genres
.PP
Use MusicBrainz genre tags to populate (and replace if it\[aq]s already
set) the \f[V]genre\f[R] tag.
This will make it a list of all the genres tagged for the release and
the release-group on MusicBrainz, separated by \[dq]; \[dq] and sorted
by the total number of votes.
Default: \f[V]no\f[R]
.SS Autotagger Matching Options {#match-config}
.PP
You can configure some aspects of the logic beets uses when
automatically matching MusicBrainz results under the \f[V]match:\f[R]
section.
To control how \f[I]tolerant\f[R] the autotagger is of differences, use
the \f[V]strong_rec_thresh\f[R] option, which reflects the distance
threshold below which beets will make a \[dq]strong recommendation\[dq]
that the metadata be used.
Strong recommendations are accepted automatically (except in
\[dq]timid\[dq] mode), so you can use this to make beets ask your
opinion more or less often.
.PP
The threshold is a \f[I]distance\f[R] value between 0.0 and 1.0, so you
can think of it as the opposite of a \f[I]similarity\f[R] value.
For example, if you want to automatically accept any matches above 90%
similarity, use:
.IP
.nf
\f[C]
match:
    strong_rec_thresh: 0.10
\f[R]
.fi
.PP
The default strong recommendation threshold is 0.04.
.PP
The \f[V]medium_rec_thresh\f[R] and \f[V]rec_gap_thresh\f[R] options
work similarly.
When a match is below the \f[I]medium\f[R] recommendation threshold or
the distance between it and the next-best match is above the
\f[I]gap\f[R] threshold, the importer will suggest that match but not
automatically confirm it.
Otherwise, you\[aq]ll see a list of options to choose from.
.SS max_rec
.PP
As mentioned above, autotagger matches have \f[I]recommendations\f[R]
that control how the UI behaves for a certain quality of match.
The recommendation for a certain match is based on the overall distance
calculation.
But you can also control the recommendation when a specific distance
penalty is applied by defining \f[I]maximum\f[R] recommendations for
each field:
.PP
To define maxima, use keys under \f[V]max_rec:\f[R] in the
\f[V]match\f[R] section.
The defaults are \[dq]medium\[dq] for missing and unmatched tracks and
\[dq]strong\[dq] (i.e., no maximum) for everything else:
.IP
.nf
\f[C]
match:
    max_rec:
        missing_tracks: medium
        unmatched_tracks: medium
\f[R]
.fi
.PP
If a recommendation is higher than the configured maximum and the
indicated penalty is applied, the recommendation is downgraded.
The setting for each field can be one of \f[V]none\f[R], \f[V]low\f[R],
\f[V]medium\f[R] or \f[V]strong\f[R].
When the maximum recommendation is \f[V]strong\f[R], no
\[dq]downgrading\[dq] occurs.
The available penalty names here are:
.IP \[bu] 2
source
.IP \[bu] 2
artist
.IP \[bu] 2
album
.IP \[bu] 2
media
.IP \[bu] 2
mediums
.IP \[bu] 2
year
.IP \[bu] 2
country
.IP \[bu] 2
label
.IP \[bu] 2
catalognum
.IP \[bu] 2
albumdisambig
.IP \[bu] 2
album_id
.IP \[bu] 2
tracks
.IP \[bu] 2
missing_tracks
.IP \[bu] 2
unmatched_tracks
.IP \[bu] 2
track_title
.IP \[bu] 2
track_artist
.IP \[bu] 2
track_index
.IP \[bu] 2
track_length
.IP \[bu] 2
track_id
.SS preferred
.PP
In addition to comparing the tagged metadata with the match metadata for
similarity, you can also specify an ordered list of preferred countries
and media types.
.PP
A distance penalty will be applied if the country or media type from the
match metadata doesn\[aq]t match.
The specified values are preferred in descending order (i.e., the first
item will be most preferred).
Each item may be a regular expression, and will be matched case
insensitively.
The number of media will be stripped when matching preferred media (e.g.
\[dq]2x\[dq] in \[dq]2xCD\[dq]).
.PP
You can also tell the autotagger to prefer matches that have a release
year closest to the original year for an album.
.PP
Here\[aq]s an example:
.IP
.nf
\f[C]
match:
    preferred:
        countries: [\[aq]US\[aq], \[aq]GB|UK\[aq]]
        media: [\[aq]CD\[aq], \[aq]Digital Media|File\[aq]]
        original_year: yes
\f[R]
.fi
.PP
By default, none of these options are enabled.
.SS ignored
.PP
You can completely avoid matches that have certain penalties applied by
adding the penalty name to the \f[V]ignored\f[R] setting:
.IP
.nf
\f[C]
match:
    ignored: missing_tracks unmatched_tracks
\f[R]
.fi
.PP
The available penalties are the same as those for the
\f[V]max_rec\f[R]{.interpreted-text role=\[dq]ref\[dq]} setting.
.PP
For example, setting \f[V]ignored: missing_tracks\f[R] will skip any
album matches where your audio files are missing some of the tracks.
The importer will not attempt to display these matches.
It does not ignore the fact that the album is missing tracks, which
would allow these matches to apply more easily.
To do that, you\[aq]ll want to adjust the penalty for missing tracks.
.SS required
.PP
You can avoid matches that lack certain required information.
Add the tags you want to enforce to the \f[V]required\f[R] setting:
.IP
.nf
\f[C]
match:
    required: year label catalognum country
\f[R]
.fi
.PP
No tags are required by default.
.SS ignored_media
.PP
A list of media (i.e., formats) in metadata databases to ignore when
matching music.
You can use this to ignore all media that usually contain video instead
of audio, for example:
.IP
.nf
\f[C]
match:
    ignored_media: [\[aq]Data CD\[aq], \[aq]DVD\[aq], \[aq]DVD-Video\[aq], \[aq]Blu-ray\[aq], \[aq]HD-DVD\[aq],
                    \[aq]VCD\[aq], \[aq]SVCD\[aq], \[aq]UMD\[aq], \[aq]VHS\[aq]]
\f[R]
.fi
.PP
No formats are ignored by default.
.SS ignore_data_tracks
.PP
By default, audio files contained in data tracks within a release are
included in the album\[aq]s tracklist.
If you want them to be included, set it \f[V]no\f[R].
.PP
Default: \f[V]yes\f[R].
.SS ignore_video_tracks
.PP
By default, video tracks within a release will be ignored.
If you want them to be included (for example if you would like to track
the audio-only versions of the video tracks), set it to \f[V]no\f[R].
.PP
Default: \f[V]yes\f[R].
.SS Path Format Configuration {#path-format-config}
.PP
You can also configure the directory hierarchy beets uses to store
music.
These settings appear under the \f[V]paths:\f[R] key.
Each string is a template string that can refer to metadata fields like
\f[V]$artist\f[R] or \f[V]$title\f[R].
The filename extension is added automatically.
At the moment, you can specify three special paths: \f[V]default\f[R]
for most releases, \f[V]comp\f[R] for \[dq]various artist\[dq] releases
with no dominant artist, and \f[V]singleton\f[R] for non-album tracks.
The defaults look like this:
.IP
.nf
\f[C]
paths:
    default: $albumartist/$album%aunique{}/$track $title
    singleton: Non-Album/$artist/$title
    comp: Compilations/$album%aunique{}/$track $title
\f[R]
.fi
.PP
Note the use of \f[V]$albumartist\f[R] instead of \f[V]$artist\f[R];
this ensures that albums will be well-organized.
For more about these format strings, see
\f[V]pathformat\f[R]{.interpreted-text role=\[dq]doc\[dq]}.
The \f[V]aunique{}\f[R] function ensures that identically-named albums
are placed in different directories; see
\f[V]aunique\f[R]{.interpreted-text role=\[dq]ref\[dq]} for details.
.PP
In addition to \f[V]default\f[R], \f[V]comp\f[R], and
\f[V]singleton\f[R], you can condition path queries based on beets
queries (see \f[V]/reference/query\f[R]{.interpreted-text
role=\[dq]doc\[dq]}).
This means that a config file like this:
.IP
.nf
\f[C]
paths:
    albumtype:soundtrack: Soundtracks/$album/$track $title
\f[R]
.fi
.PP
will place soundtrack albums in a separate directory.
The queries are tested in the order they appear in the configuration
file, meaning that if an item matches multiple queries, beets will use
the path format for the \f[I]first\f[R] matching query.
.PP
Note that the special \f[V]singleton\f[R] and \f[V]comp\f[R] path format
conditions are, in fact, just shorthand for the explicit queries
\f[V]singleton:true\f[R] and \f[V]comp:true\f[R].
In contrast, \f[V]default\f[R] is special and has no query equivalent:
the \f[V]default\f[R] format is only used if no queries match.
.SS Configuration Location
.PP
The beets configuration file is usually located in a standard location
that depends on your OS, but there are a couple of ways you can tell
beets where to look.
.SS Environment Variable
.PP
First, you can set the \f[V]BEETSDIR\f[R] environment variable to a
directory containing a \f[V]config.yaml\f[R] file.
This replaces your configuration in the default location.
This also affects where auxiliary files, like the library database, are
stored by default (that\[aq]s where relative paths are resolved to).
This environment variable is useful if you need to manage multiple beets
libraries with separate configurations.
.SS Command-Line Option
.PP
Alternatively, you can use the \f[V]--config\f[R] command-line option to
indicate a YAML file containing options that will then be merged with
your existing options (from \f[V]BEETSDIR\f[R] or the default
locations).
This is useful if you want to keep your configuration mostly the same
but modify a few options as a batch.
For example, you might have different strategies for importing files,
each with a different set of importer options.
.SS Default Location
.PP
In the absence of a \f[V]BEETSDIR\f[R] variable, beets searches a few
places for your configuration, depending on the platform:
.IP \[bu] 2
On Unix platforms, including OS X:\f[V]\[ti]/.config/beets\f[R] and then
\f[V]$XDG_CONFIG_DIR/beets\f[R], if the environment variable is set.
.IP \[bu] 2
On OS X, we also search
\f[V]\[ti]/Library/Application Support/beets\f[R] before the Unixy
locations.
.IP \[bu] 2
On Windows: \f[V]\[ti]\[rs]AppData\[rs]Roaming\[rs]beets\f[R], and then
\f[V]%APPDATA%\[rs]beets\f[R], if the environment variable is set.
.PP
Beets uses the first directory in your platform\[aq]s list that contains
\f[V]config.yaml\f[R].
If no config file exists, the last path in the list is used.
.SS Example {#config-example}
.PP
Here\[aq]s an example file:
.IP
.nf
\f[C]
directory: /var/mp3
import:
    copy: yes
    write: yes
    log: beetslog.txt
art_filename: albumart
plugins: bpd
pluginpath: \[ti]/beets/myplugins
ui:
    color: yes

paths:
    default: $genre/$albumartist/$album/$track $title
    singleton: Singletons/$artist - $title
    comp: $genre/$album/$track $title
    albumtype:soundtrack: Soundtracks/$album/$track $title
\f[R]
.fi
.SH Path Formats
.PP
The \f[V]paths:\f[R] section of the config file (see
\f[V]config\f[R]{.interpreted-text role=\[dq]doc\[dq]}) lets you specify
the directory and file naming scheme for your music library.
Templates substitute symbols like \f[V]$title\f[R] (any field value
prefixed by \f[V]$\f[R]) with the appropriate value from the track\[aq]s
metadata.
Beets adds the filename extension automatically.
.PP
For example, consider this path format string:
\f[V]$albumartist/$album/$track $title\f[R]
.PP
Here are some paths this format will generate:
.IP \[bu] 2
\f[V]Yeah Yeah Yeahs/It\[aq]s Blitz!/01 Zero.mp3\f[R]
.IP \[bu] 2
\f[V]Spank Rock/YoYoYoYoYo/11 Competition.mp3\f[R]
.IP \[bu] 2
\f[V]The Magnetic Fields/Realism/01 You Must Be Out of Your Mind.mp3\f[R]
.PP
Because \f[V]$\f[R] is used to delineate a field reference, you can use
\f[V]$$\f[R] to emit a dollars sign.
As with Python template
strings (https://docs.python.org/library/string.html#template-strings),
\f[V]${title}\f[R] is equivalent to \f[V]$title\f[R]; you can use this
if you need to separate a field name from the text that follows it.
.SS A Note About Artists
.PP
Note that in path formats, you almost certainly want to use
\f[V]$albumartist\f[R] and not \f[V]$artist\f[R].
The latter refers to the \[dq]track artist\[dq] when it is present,
which means that albums that have tracks from different artists on them
(like Stop Making
Sense (https://musicbrainz.org/release/798dcaab-0f1a-4f02-a9cb-61d5b0ddfd36.html),
for example) will be placed into different folders!
Continuing with the Stop Making Sense example, you\[aq]ll end up with
most of the tracks in a \[dq]Talking Heads\[dq] directory and one in a
\[dq]Tom Tom Club\[dq] directory.
You probably don\[aq]t want that!
So use \f[V]$albumartist\f[R].
.PP
As a convenience, however, beets allows \f[V]$albumartist\f[R] to fall
back to the value for \f[V]$artist\f[R] and vice-versa if one tag is
present but the other is not.
.SS Template Functions
.PP
Beets path formats also support \f[I]function calls\f[R], which can be
used to transform text and perform logical manipulations.
The syntax for function calls is like this: \f[V]%func{arg,arg}\f[R].
For example, the \f[V]upper\f[R] function makes its argument upper-case,
so \f[V]%upper{beets rocks}\f[R] will be replaced with
\f[V]BEETS ROCKS\f[R].
You can, of course, nest function calls and place variable references in
function arguments, so \f[V]%upper{$artist}\f[R] becomes the upper-case
version of the track\[aq]s artists.
.PP
These functions are built in to beets:
.IP \[bu] 2
\f[V]%lower{text}\f[R]: Convert \f[V]text\f[R] to lowercase.
.IP \[bu] 2
\f[V]%upper{text}\f[R]: Convert \f[V]text\f[R] to UPPERCASE.
.IP \[bu] 2
\f[V]%title{text}\f[R]: Convert \f[V]text\f[R] to Title Case.
.IP \[bu] 2
\f[V]%left{text,n}\f[R]: Return the first \f[V]n\f[R] characters of
\f[V]text\f[R].
.IP \[bu] 2
\f[V]%right{text,n}\f[R]: Return the last \f[V]n\f[R] characters of
\f[V]text\f[R].
.IP \[bu] 2
\f[V]%if{condition,text}\f[R] or
\f[V]%if{condition,truetext,falsetext}\f[R]: If \f[V]condition\f[R] is
nonempty (or nonzero, if it\[aq]s a number), then returns the second
argument.
Otherwise, returns the third argument if specified (or nothing if
\f[V]falsetext\f[R] is left off).
.IP \[bu] 2
\f[V]%asciify{text}\f[R]: Convert non-ASCII characters to their ASCII
equivalents.
For example, \[dq]caf\['e]\[dq] becomes \[dq]cafe\[dq].
Uses the mapping provided by the unidecode
module (https://pypi.org/project/Unidecode).
See the \f[V]asciify-paths\f[R]{.interpreted-text role=\[dq]ref\[dq]}
configuration option.
.IP \[bu] 2
\f[V]%aunique{identifiers,disambiguators,brackets}\f[R]: Provides a
unique string to disambiguate similar albums in the database.
See \f[V]aunique\f[R]{.interpreted-text role=\[dq]ref\[dq]}, below.
.IP \[bu] 2
\f[V]%time{date_time,format}\f[R]: Return the date and time in any
format accepted by
strftime (https://docs.python.org/3/library/time.html#time.strftime).
For example, to get the year some music was added to your library, use
\f[V]%time{$added,%Y}\f[R].
.IP \[bu] 2
\f[V]%first{text}\f[R]: Returns the first item, separated by \f[V];\f[R]
(a semicolon followed by a space).
You can use \f[V]%first{text,count,skip}\f[R], where \f[V]count\f[R] is
the number of items (default 1) and \f[V]skip\f[R] is number to skip
(default 0).
You can also use \f[V]%first{text,count,skip,sep,join}\f[R] where
\f[V]sep\f[R] is the separator, like \f[V];\f[R] or \f[V]/\f[R] and join
is the text to concatenate the items.
.IP \[bu] 2
\f[V]%ifdef{field}\f[R], \f[V]%ifdef{field,truetext}\f[R] or
\f[V]%ifdef{field,truetext,falsetext}\f[R]: Checks if an flexible
attribute \f[V]field\f[R] is defined.
If it exists, then return \f[V]truetext\f[R] or \f[V]field\f[R]
(default).
Otherwise, returns \f[V]falsetext\f[R].
The \f[V]field\f[R] should be entered without \f[V]$\f[R].
Note that this doesn\[aq]t work with built-in
\f[V]itemfields\f[R]{.interpreted-text role=\[dq]ref\[dq]}, as they are
always defined.
.PP
Plugins can extend beets with more template functions (see
\f[V]templ_plugins\f[R]{.interpreted-text role=\[dq]ref\[dq]}).
.SS Album Disambiguation {#aunique}
.PP
Occasionally, bands release two albums with the same name (c.f.
Crystal Castles, Weezer, and any situation where a single has the same
name as an album or EP).
Beets ships with special support, in the form of the
\f[V]%aunique{}\f[R] template function, to avoid placing two
identically-named albums in the same directory on disk.
.PP
The \f[V]aunique\f[R] function detects situations where two albums have
some identical fields and emits text from additional fields to
disambiguate the albums.
For example, if you have both Crystal Castles albums in your library,
\f[V]%aunique{}\f[R] will expand to \[dq][2008]\[dq] for one album and
\[dq][2010]\[dq] for the other.
The function detects that you have two albums with the same artist and
title but that they have different release years.
.PP
For full flexibility, the \f[V]%aunique\f[R] function takes three
arguments.
The first two are whitespace-separated lists of album field names: a set
of \f[I]identifiers\f[R] and a set of \f[I]disambiguators\f[R].
The third argument is a pair of characters used to surround the
disambiguator.
.PP
Any group of albums with identical values for all the identifiers will
be considered \[dq]duplicates\[dq].
Then, the function tries each disambiguator field, looking for one that
distinguishes each of the duplicate albums from each other.
The first such field is used as the result for \f[V]%aunique\f[R].
If no field suffices, an arbitrary number is used to distinguish the two
albums.
.PP
The default identifiers are \f[V]albumartist album\f[R] and the default
disambiguators are
\f[V]albumtype year label catalognum albumdisambig releasegroupdisambig\f[R].
So you can get reasonable disambiguation behavior if you just use
\f[V]%aunique{}\f[R] with no parameters in your path forms (as in the
default path formats), but you can customize the disambiguation if, for
example, you include the year by default in path formats.
.PP
The default characters used as brackets are \f[V][]\f[R].
To change this, provide a third argument to the \f[V]%aunique\f[R]
function consisting of two characters: the left and right brackets.
Or, to turn off bracketing entirely, leave argument blank.
.PP
One caveat: When you import an album that is named identically to one
already in your library, the \f[I]first\f[R] album---the one already in
your library--- will not consider itself a duplicate at import time.
This means that \f[V]%aunique{}\f[R] will expand to nothing for this
album and no disambiguation string will be used at its import time.
Only the second album will receive a disambiguation string.
If you want to add the disambiguation string to both albums, just run
\f[V]beet move\f[R] (possibly restricted by a query) to update the paths
for the albums.
.SS Syntax Details
.PP
The characters \f[V]$\f[R], \f[V]%\f[R], \f[V]{\f[R], \f[V]}\f[R], and
\f[V],\f[R] are \[dq]special\[dq] in the path template syntax.
This means that, for example, if you want a \f[V]%\f[R] character to
appear in your paths, you\[aq]ll need to be careful that you don\[aq]t
accidentally write a function call.
To escape any of these characters (except \f[V]{\f[R], and \f[V],\f[R]
outside a function argument), prefix it with a \f[V]$\f[R].
For example, \f[V]$$\f[R] becomes \f[V]$\f[R]; \f[V]$%\f[R] becomes
\f[V]%\f[R], etc.
The only exceptions are:
.IP \[bu] 2
\f[V]${\f[R], which is ambiguous with the variable reference syntax
(like \f[V]${title}\f[R]).
To insert a \f[V]{\f[R] alone, it\[aq]s always sufficient to just type
\f[V]{\f[R].
.IP \[bu] 2
commas are used as argument separators in function calls.
Inside of a function\[aq]s argument, use \f[V]$,\f[R] to get a literal
\f[V],\f[R] character.
Outside of any function argument, escaping is not necessary: \f[V],\f[R]
by itself will produce \f[V],\f[R] in the output.
.PP
If a value or function is undefined, the syntax is simply left
unreplaced.
For example, if you write \f[V]$foo\f[R] in a path template, this will
yield \f[V]$foo\f[R] in the resulting paths because \[dq]foo\[dq] is not
a valid field name.
The same is true of syntax errors like unclosed \f[V]{}\f[R] pairs; if
you ever see template syntax constructs leaking into your paths, check
your template for errors.
.PP
If an error occurs in the Python code that implements a function, the
function call will be expanded to a string that describes the exception
so you can debug your template.
For example, the second parameter to \f[V]%left\f[R] must be an integer;
if you write \f[V]%left{foo,bar}\f[R], this will be expanded to
something like \f[V]<ValueError: invalid literal for int()>\f[R].
.SS Available Values {#itemfields}
.PP
Here\[aq]s a list of the different values available to path formats.
The current list can be found definitively by running the command
\f[V]beet fields\f[R].
Note that plugins can add new (or replace existing) template values (see
\f[V]templ_plugins\f[R]{.interpreted-text role=\[dq]ref\[dq]}).
.PP
Ordinary metadata:
.IP \[bu] 2
title
.IP \[bu] 2
artist
.IP \[bu] 2
artist_sort: The \[dq]sort name\[dq] of the track artist (e.g.,
\[dq]Beatles, The\[dq] or \[dq]White, Jack\[dq]).
.IP \[bu] 2
artist_credit: The track-specific artist
credit (https://wiki.musicbrainz.org/Artist_Credit) name, which may be a
variation of the artist\[aq]s \[dq]canonical\[dq] name.
.IP \[bu] 2
album
.IP \[bu] 2
albumartist: The artist for the entire album, which may be different
from the artists for the individual tracks.
.IP \[bu] 2
albumartist_sort
.IP \[bu] 2
albumartist_credit
.IP \[bu] 2
genre
.IP \[bu] 2
composer
.IP \[bu] 2
grouping
.IP \[bu] 2
year, month, day: The release date of the specific release.
.IP \[bu] 2
original_year, original_month, original_day: The release date of the
original version of the album.
.IP \[bu] 2
track
.IP \[bu] 2
tracktotal
.IP \[bu] 2
disc
.IP \[bu] 2
disctotal
.IP \[bu] 2
lyrics
.IP \[bu] 2
comments
.IP \[bu] 2
bpm
.IP \[bu] 2
comp: Compilation flag.
.IP \[bu] 2
albumtype: The MusicBrainz album type; the MusicBrainz wiki has a list
of type names (https://musicbrainz.org/doc/Release_Group/Type).
.IP \[bu] 2
label
.IP \[bu] 2
asin
.IP \[bu] 2
catalognum
.IP \[bu] 2
script
.IP \[bu] 2
language
.IP \[bu] 2
country
.IP \[bu] 2
albumstatus
.IP \[bu] 2
media
.IP \[bu] 2
albumdisambig
.IP \[bu] 2
disctitle
.IP \[bu] 2
encoder
.PP
Audio information:
.IP \[bu] 2
length (in seconds)
.IP \[bu] 2
bitrate (in kilobits per second, with units: e.g., \[dq]192kbps\[dq])
.IP \[bu] 2
bitrate_mode (e.g., \[dq]CBR\[dq], \[dq]VBR\[dq] or \[dq]ABR\[dq], only
available for the MP3 format)
.IP \[bu] 2
encoder_info (e.g., \[dq]LAME 3.97.0\[dq], only available for some
formats)
.IP \[bu] 2
encoder_settings (e.g., \[dq]-V2\[dq], only available for the MP3
format)
.IP \[bu] 2
format (e.g., \[dq]MP3\[dq] or \[dq]FLAC\[dq])
.IP \[bu] 2
channels
.IP \[bu] 2
bitdepth (only available for some formats)
.IP \[bu] 2
samplerate (in kilohertz, with units: e.g., \[dq]48kHz\[dq])
.PP
MusicBrainz and fingerprint information:
.IP \[bu] 2
mb_trackid
.IP \[bu] 2
mb_releasetrackid
.IP \[bu] 2
mb_albumid
.IP \[bu] 2
mb_artistid
.IP \[bu] 2
mb_albumartistid
.IP \[bu] 2
mb_releasegroupid
.IP \[bu] 2
acoustid_fingerprint
.IP \[bu] 2
acoustid_id
.PP
Library metadata:
.IP \[bu] 2
mtime: The modification time of the audio file.
.IP \[bu] 2
added: The date and time that the music was added to your library.
.IP \[bu] 2
path: The item\[aq]s filename.
.SS Template functions and values provided by plugins {#templ_plugins}
.PP
Beets plugins can provide additional fields and functions to templates.
See the \f[V]/plugins/index\f[R]{.interpreted-text role=\[dq]doc\[dq]}
page for a full list of plugins.
Some plugin-provided constructs include:
.IP \[bu] 2
\f[V]$missing\f[R] by \f[V]/plugins/missing\f[R]{.interpreted-text
role=\[dq]doc\[dq]}: The number of missing tracks per album.
.IP \[bu] 2
\f[V]%bucket{text}\f[R] by \f[V]/plugins/bucket\f[R]{.interpreted-text
role=\[dq]doc\[dq]}: Substitute a string by the range it belongs to.
.IP \[bu] 2
\f[V]%the{text}\f[R] by \f[V]/plugins/the\f[R]{.interpreted-text
role=\[dq]doc\[dq]}: Moves English articles to ends of strings.
.PP
The \f[V]/plugins/inline\f[R]{.interpreted-text role=\[dq]doc\[dq]} lets
you define template fields in your beets configuration file using Python
snippets.
And for more advanced processing, you can go all-in and write a
dedicated plugin to register your own fields and functions (see
\f[V]writing-plugins\f[R]{.interpreted-text role=\[dq]ref\[dq]}).
.SS See Also
.PP
\f[V]https://beets.readthedocs.org/\f[R]
.PP
\f[V]beet(1)\f[R]{.interpreted-text role=\[dq]manpage\[dq]}
